// Package ofederation provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package ofederation

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/krisch/crm-backend/domain"
	"github.com/krisch/crm-backend/dto"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// AddGroupRequest defines model for AddGroupRequest.
type AddGroupRequest struct {
	Name string `json:"name" validate:"trim,name,min=3,max=100"`
}

// AgentCreateRequest defines model for AgentCreateRequest.
type AgentCreateRequest struct {
	CompanyUuid *openapi_types.UUID `json:"company_uuid,omitempty" validate:"omitempty,uuid"`
	Contacts    []struct {
		Type  string `json:"type" validate:"trim,min=3,max=100"`
		Value string `json:"value" validate:"trim,min=3,max=100"`
	} `json:"contacts"`
	Name string `json:"name" validate:"trim,name,min=3,max=100"`
}

// AgentDTO defines model for AgentDTO.
type AgentDTO = dto.AgentDTO

// AgentPatchRequest defines model for AgentPatchRequest.
type AgentPatchRequest struct {
	Contacts []struct {
		Type  string `json:"type" validate:"trim,min=3,max=100"`
		Value string `json:"value" validate:"trim,min=3,max=100"`
	} `json:"contacts"`
	Name string `json:"name" validate:"trim,name,min=3,max=100"`
}

// Ans defines model for Ans.
type Ans struct {
	Changed *bool `json:"Changed,omitempty"`
	CorrAcc *uint `json:"Corr.acc.,omitempty"`
}

// BankAccountDTO defines model for BankAccountDTO.
type BankAccountDTO struct {
	Adress   *string `json:"adress,omitempty"`
	Bik      *string `json:"bik,omitempty"`
	Comment  *string `json:"comment,omitempty"`
	CorAcc   *string `json:"corAcc,omitempty"`
	CurAcc   *string `json:"curAcc,omitempty"`
	Currency *string `json:"currency,omitempty"`
	Name     *string `json:"name,omitempty"`
}

// CompanyAddUserRequest defines model for CompanyAddUserRequest.
type CompanyAddUserRequest struct {
	UserUuid openapi_types.UUID `json:"user_uuid" validate:"uuid"`
}

// CompanyDTO defines model for CompanyDTO.
type CompanyDTO = dto.CompanyDTO

// CompanyFieldDTO defines model for CompanyFieldDTO.
type CompanyFieldDTO = dto.CompanyFieldDTO

// CompanyPriorityCreateRequest defines model for CompanyPriorityCreateRequest.
type CompanyPriorityCreateRequest struct {
	Color  string `json:"color" validate:"color"`
	Name   string `json:"name" validate:"trim,name,min=3,max=100"`
	Number int    `json:"number" validate:"gte=10,lte=30"`
}

// CompanyPriorityDTO defines model for CompanyPriorityDTO.
type CompanyPriorityDTO = dto.CompanyPriorityDTO

// FederationAddUserRequest defines model for FederationAddUserRequest.
type FederationAddUserRequest struct {
	UserUuid openapi_types.UUID `json:"user_uuid" validate:"uuid"`
}

// FederationCreateCompanyRequest defines model for FederationCreateCompanyRequest.
type FederationCreateCompanyRequest struct {
	FederationUuid openapi_types.UUID `json:"federation_uuid" validate:"uuid"`
	Name           string             `json:"name" validate:"trim,name,min=3,max=100"`
}

// FederationCreateRequest defines model for FederationCreateRequest.
type FederationCreateRequest struct {
	Name string `json:"name" validate:"trim,name,min=3,max=100"`
}

// FederationDTO defines model for FederationDTO.
type FederationDTO = dto.FederationDTO

// GroupDTO defines model for GroupDTO.
type GroupDTO = dto.GroupDTO

// InviteCreateRequest defines model for InviteCreateRequest.
type InviteCreateRequest struct {
	CompanyUuid *openapi_types.UUID `json:"company_uuid,omitempty" validate:"omitempty,uuid"`
	Email       string              `json:"email" validate:"email"`
}

// InviteDTO defines model for InviteDTO.
type InviteDTO = dto.InviteDTO

// NameRequest defines model for NameRequest.
type NameRequest struct {
	Name string `json:"name" validate:"trim,name,min=0,max=100"`
}

// NameRequiredRequest defines model for NameRequiredRequest.
type NameRequiredRequest struct {
	Name string `json:"name" validate:"trim,name,min=1,max=100"`
}

// PatchGroupRequest defines model for PatchGroupRequest.
type PatchGroupRequest struct {
	Name *string `json:"name,omitempty" validate:"trim,name,min=1,max=100"`
}

// PermissionCreateRequest defines model for PermissionCreateRequest.
type PermissionCreateRequest struct {
	FederationUuid openapi_types.UUID `json:"federation_uuid" validate:"uuid"`
	Rules          PermissionRulesDTO `json:"rules"`
	UserUuid       openapi_types.UUID `json:"user_uuid" validate:"uuid"`
	Uuid           openapi_types.UUID `json:"uuid" validate:"uuid"`
}

// PermissionRulesDTO defines model for PermissionRulesDTO.
type PermissionRulesDTO = dto.PermissionRulesDTO

// ProjectAddUserRequest defines model for ProjectAddUserRequest.
type ProjectAddUserRequest struct {
	UserUuid openapi_types.UUID `json:"user_uuid" validate:"uuid"`
}

// ProjectCatalogDataDTO defines model for ProjectCatalogDataDTO.
type ProjectCatalogDataDTO = dto.ProjectCatalogDataDTO

// ProjectCreateRequest defines model for ProjectCreateRequest.
type ProjectCreateRequest struct {
	CompanyUuid   openapi_types.UUID `json:"company_uuid" validate:"uuid"`
	Description   string             `json:"description" validate:"trim,max=5000"`
	FieldsSort    []string           `json:"fields_sort" validate:"omitempty,dive,min=0,max=30"`
	Name          string             `json:"name" validate:"trim,min=3,max=100"`
	ResponsibleBy string             `json:"responsible_by" validate:"omitempty,email"`
	StatusSort    []int              `json:"status_sort" validate:"dive,gte=0,lte=30"`
}

// ProjectDTO defines model for ProjectDTO.
type ProjectDTO = dto.ProjectDTO

// ProjectDTOs defines model for ProjectDTOs.
type ProjectDTOs = dto.ProjectDTOs

// ProjectFieldCreateRequest defines model for ProjectFieldCreateRequest.
type ProjectFieldCreateRequest struct {
	DataType           domain.FieldDataType `json:"data_type" validate:"min=0,max=14"`
	DataUuid           *openapi_types.UUID  `json:"data_uuid,omitempty" validate:"omitempty,uuid"`
	Description        string               `json:"description" validate:"trim,max=5000"`
	Icon               string               `json:"icon" validate:"trim,omitempty,lte=50"`
	Name               string               `json:"name" validate:"trim,name,min=1,max=50"`
	RequiredOnStatuses []int                `json:"required_on_statuses" validate:"omitempty,dive,gte=0,lte=20"`
}

// ProjectFieldPutRequest defines model for ProjectFieldPutRequest.
type ProjectFieldPutRequest struct {
	Description        string `json:"description" validate:"trim,max=5000"`
	Icon               string `json:"icon" validate:"trim,max=50"`
	Name               string `json:"name" validate:"trim,name,min=1,max=50"`
	RequiredOnStatuses []int  `json:"required_on_statuses" validate:"omitempty,dive,gte=0,lte=20"`
}

// ProjectRequestOptions defines model for ProjectRequestOptions.
type ProjectRequestOptions struct {
	Color                     *string `json:"color,omitempty" validate:"omitempty,color"`
	RequireCancelationComment *bool   `json:"require_cancelation_comment,omitempty"`
	RequireDoneComment        *bool   `json:"require_done_comment,omitempty"`
	StatusEnable              *bool   `json:"status_enable,omitempty"`
}

// ProjectRequestParams defines model for ProjectRequestParams.
type ProjectRequestParams struct {
	Description   *string   `json:"description,omitempty" validate:"omitempty,trim,max=5000"`
	FieldsSort    *[]string `json:"fields_sort,omitempty" validate:"omitempty,dive,min=0,max=30"`
	ResponsibleBy *string   `json:"responsible_by,omitempty" validate:"omitempty,email"`
	Status        *int      `json:"status,omitempty" validate:"omitempty,min=0,max=10"`
	StatusSort    *[]int    `json:"status_sort,omitempty" validate:"omitempty,dive,gte=0,lte=30"`
}

// ProjectStatusCreateRequest defines model for ProjectStatusCreateRequest.
type ProjectStatusCreateRequest struct {
	Color       string `json:"color" validate:"color"`
	Description string `json:"description" validate:"trim,max=5000"`
	Name        string `json:"name" validate:"trim,name,min=3,max=100"`
	Number      int    `json:"number" validate:"gte=0,lte=30"`
}

// ProjectStatusDTO defines model for ProjectStatusDTO.
type ProjectStatusDTO = dto.ProjectStatusDTO

// SearchUserRequest defines model for SearchUserRequest.
type SearchUserRequest struct {
	CompanyUuid    *openapi_types.UUID `json:"company_uuid" validate:"omitempty,uuid"`
	FederationUuid openapi_types.UUID  `json:"federation_uuid" validate:"uuid"`
	Search         string              `json:"search" validate:"trim,min=1,max=200"`
}

// SmsDTO defines model for SmsDTO.
type SmsDTO = dto.SmsDTO

// SurveyCreateRequest defines model for SurveyCreateRequest.
type SurveyCreateRequest struct {
	Body map[string]interface{} `json:"body"`
	Name string                 `json:"name" validate:"trim,name,min=3,max=100"`
}

// SurveyDTO defines model for SurveyDTO.
type SurveyDTO = dto.SurveyDTO

// TagCreateRequest defines model for TagCreateRequest.
type TagCreateRequest struct {
	Color       string             `json:"color" validate:"color"`
	CompanyUuid openapi_types.UUID `json:"company_uuid" validate:"uuid"`
	Name        string             `json:"name" validate:"trim,name,min=1,max=100"`
}

// TagDTO defines model for TagDTO.
type TagDTO = dto.TagDTO

// UUIDResponse defines model for UUIDResponse.
type UUIDResponse struct {
	Uuid openapi_types.UUID `json:"uuid"`
}

// UserDTO defines model for UserDTO.
type UserDTO = dto.UserDTO

// EntityName defines model for entityName.
type EntityName = string

// EntityUUID defines model for entityUUID.
type EntityUUID = openapi_types.UUID

// UserUUID defines model for userUUID.
type UserUUID = openapi_types.UUID

// Uuid defines model for uuid.
type Uuid = openapi_types.UUID

// PatchCompanyUUIDPrioritiesEntityUUIDJSONBody defines parameters for PatchCompanyUUIDPrioritiesEntityUUID.
type PatchCompanyUUIDPrioritiesEntityUUIDJSONBody struct {
	Color string `json:"color" validate:"color"`
	Name  string `json:"name" validate:"trim,min=1,max=50"`
}

// GetCompanyUUIDSmsParams defines parameters for GetCompanyUUIDSms.
type GetCompanyUUIDSmsParams struct {
	Offset *int  `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *int  `form:"limit,omitempty" json:"limit,omitempty"`
	IsMy   *bool `form:"is_my,omitempty" json:"is_my,omitempty"`
}

// PostCompanyUUIDSmsCostJSONBody defines parameters for PostCompanyUUIDSmsCost.
type PostCompanyUUIDSmsCostJSONBody struct {
	Phone int    `json:"phone" validate:"trim,min=1000000000,max=9999999999999"`
	Text  string `json:"text" validate:"trim,min=1,max=100"`
}

// PostCompanyUUIDSmsOptionsJSONBody defines parameters for PostCompanyUUIDSmsOptions.
type PostCompanyUUIDSmsOptionsJSONBody struct {
	Api  string `json:"api"`
	From string `json:"from"`
}

// PostCompanyUUIDSmsSendJSONBody defines parameters for PostCompanyUUIDSmsSend.
type PostCompanyUUIDSmsSendJSONBody struct {
	Phone int    `json:"phone" validate:"trim,min=1000000000,max=9999999999999"`
	Text  string `json:"text" validate:"trim,min=1,max=100"`
}

// PostCompanyUUIDSmsSendParams defines parameters for PostCompanyUUIDSmsSend.
type PostCompanyUUIDSmsSendParams struct {
	MockSms *string `json:"Mock-Sms,omitempty"`
}

// GetFederationUUIDAgentParams defines parameters for GetFederationUUIDAgent.
type GetFederationUUIDAgentParams struct {
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetFederationUUIDProjectParams defines parameters for GetFederationUUIDProject.
type GetFederationUUIDProjectParams struct {
	Limit       *int                `form:"limit,omitempty" json:"limit,omitempty"`
	Offset      *int                `form:"offset,omitempty" json:"offset,omitempty"`
	CompanyUuid *openapi_types.UUID `form:"company_uuid,omitempty" json:"company_uuid,omitempty"`
}

// DeleteGroupUUIDUserJSONBody defines parameters for DeleteGroupUUIDUser.
type DeleteGroupUUIDUserJSONBody struct {
	Uuid openapi_types.UUID `json:"uuid" validate:"uuid"`
}

// PostGroupUUIDUserJSONBody defines parameters for PostGroupUUIDUser.
type PostGroupUUIDUserJSONBody struct {
	Uuid openapi_types.UUID `json:"uuid" validate:"uuid"`
}

// PostProjectUUIDCatalogJSONBody defines parameters for PostProjectUUIDCatalog.
type PostProjectUUIDCatalogJSONBody struct {
	CatalogName domain.ProjectCatalogType `json:"catalog_name" validate:"trim,required,eq=reasons|eq=reasons"`
	Value       string                    `json:"value" validate:"trim,min=1,max=500"`
}

// PatchProjectUUIDDescriptionJSONBody defines parameters for PatchProjectUUIDDescription.
type PatchProjectUUIDDescriptionJSONBody struct {
	Description string `json:"description" validate:"max=5000"`
}

// PostProjectUUIDFieldEntityUUIDJSONBody defines parameters for PostProjectUUIDFieldEntityUUID.
type PostProjectUUIDFieldEntityUUIDJSONBody struct {
	RequiredOnStatuses []int  `json:"required_on_statuses"`
	Style              string `json:"style"`
}

// PatchProjectUUIDGraphJSONBody defines parameters for PatchProjectUUIDGraph.
type PatchProjectUUIDGraphJSONBody struct {
	Graph map[string]interface{} `json:"graph"`
}

// PatchProjectUUIDStatusEntityUUIDJSONBody defines parameters for PatchProjectUUIDStatusEntityUUID.
type PatchProjectUUIDStatusEntityUUIDJSONBody struct {
	Color       string `json:"color" validate:"color"`
	Description string `json:"description" validate:"trim,max=5000"`
	Name        string `json:"name" validate:"trim,min=1,max=50"`
}

// GetTagParams defines parameters for GetTag.
type GetTagParams struct {
	CompanyUuid openapi_types.UUID `form:"company_uuid" json:"company_uuid"`
}

// PatchTagUUIDJSONBody defines parameters for PatchTagUUID.
type PatchTagUUIDJSONBody struct {
	Color string `json:"color" validate:"color"`
	Name  string `json:"name" validate:"trim,min=1,max=100"`
}

// PostCompanyJSONRequestBody defines body for PostCompany for application/json ContentType.
type PostCompanyJSONRequestBody = FederationCreateCompanyRequest

// PostCompanyUUIDFieldsJSONRequestBody defines body for PostCompanyUUIDFields for application/json ContentType.
type PostCompanyUUIDFieldsJSONRequestBody = ProjectFieldCreateRequest

// PutCompanyUUIDFieldsEntityUUIDJSONRequestBody defines body for PutCompanyUUIDFieldsEntityUUID for application/json ContentType.
type PutCompanyUUIDFieldsEntityUUIDJSONRequestBody = ProjectFieldPutRequest

// PostCompanyUUIDGroupJSONRequestBody defines body for PostCompanyUUIDGroup for application/json ContentType.
type PostCompanyUUIDGroupJSONRequestBody = AddGroupRequest

// PatchCompanyUUIDGroupEntityUUIDJSONRequestBody defines body for PatchCompanyUUIDGroupEntityUUID for application/json ContentType.
type PatchCompanyUUIDGroupEntityUUIDJSONRequestBody = PatchGroupRequest

// PatchCompanyUUIDNameJSONRequestBody defines body for PatchCompanyUUIDName for application/json ContentType.
type PatchCompanyUUIDNameJSONRequestBody = NameRequiredRequest

// PostCompanyUUIDPrioritiesJSONRequestBody defines body for PostCompanyUUIDPriorities for application/json ContentType.
type PostCompanyUUIDPrioritiesJSONRequestBody = CompanyPriorityCreateRequest

// PatchCompanyUUIDPrioritiesEntityUUIDJSONRequestBody defines body for PatchCompanyUUIDPrioritiesEntityUUID for application/json ContentType.
type PatchCompanyUUIDPrioritiesEntityUUIDJSONRequestBody PatchCompanyUUIDPrioritiesEntityUUIDJSONBody

// PostCompanyUUIDSmsCostJSONRequestBody defines body for PostCompanyUUIDSmsCost for application/json ContentType.
type PostCompanyUUIDSmsCostJSONRequestBody PostCompanyUUIDSmsCostJSONBody

// PostCompanyUUIDSmsOptionsJSONRequestBody defines body for PostCompanyUUIDSmsOptions for application/json ContentType.
type PostCompanyUUIDSmsOptionsJSONRequestBody PostCompanyUUIDSmsOptionsJSONBody

// PostCompanyUUIDSmsSendJSONRequestBody defines body for PostCompanyUUIDSmsSend for application/json ContentType.
type PostCompanyUUIDSmsSendJSONRequestBody PostCompanyUUIDSmsSendJSONBody

// PostCompanyUUIDUserJSONRequestBody defines body for PostCompanyUUIDUser for application/json ContentType.
type PostCompanyUUIDUserJSONRequestBody = CompanyAddUserRequest

// PostFederationJSONRequestBody defines body for PostFederation for application/json ContentType.
type PostFederationJSONRequestBody = FederationCreateRequest

// PostFederationUUIDAgentJSONRequestBody defines body for PostFederationUUIDAgent for application/json ContentType.
type PostFederationUUIDAgentJSONRequestBody = AgentCreateRequest

// PatchFederationUUIDAgentEntityUUIDJSONRequestBody defines body for PatchFederationUUIDAgentEntityUUID for application/json ContentType.
type PatchFederationUUIDAgentEntityUUIDJSONRequestBody = AgentPatchRequest

// PostFederationUUIDInviteJSONRequestBody defines body for PostFederationUUIDInvite for application/json ContentType.
type PostFederationUUIDInviteJSONRequestBody = InviteCreateRequest

// PatchFederationUUIDNameJSONRequestBody defines body for PatchFederationUUIDName for application/json ContentType.
type PatchFederationUUIDNameJSONRequestBody = NameRequiredRequest

// PostFederationUUIDUserJSONRequestBody defines body for PostFederationUUIDUser for application/json ContentType.
type PostFederationUUIDUserJSONRequestBody = FederationAddUserRequest

// DeleteGroupUUIDUserJSONRequestBody defines body for DeleteGroupUUIDUser for application/json ContentType.
type DeleteGroupUUIDUserJSONRequestBody DeleteGroupUUIDUserJSONBody

// PostGroupUUIDUserJSONRequestBody defines body for PostGroupUUIDUser for application/json ContentType.
type PostGroupUUIDUserJSONRequestBody PostGroupUUIDUserJSONBody

// DeleteLegalEntitiesJSONRequestBody defines body for DeleteLegalEntities for application/json ContentType.
type DeleteLegalEntitiesJSONRequestBody = BankAccountDTO

// PatchLegalEntitiesJSONRequestBody defines body for PatchLegalEntities for application/json ContentType.
type PatchLegalEntitiesJSONRequestBody = BankAccountDTO

// PostLegalEntitiesJSONRequestBody defines body for PostLegalEntities for application/json ContentType.
type PostLegalEntitiesJSONRequestBody = BankAccountDTO

// PostPermissionsJSONRequestBody defines body for PostPermissions for application/json ContentType.
type PostPermissionsJSONRequestBody = PermissionCreateRequest

// PostProfileSurveyJSONRequestBody defines body for PostProfileSurvey for application/json ContentType.
type PostProfileSurveyJSONRequestBody = SurveyCreateRequest

// PostProjectJSONRequestBody defines body for PostProject for application/json ContentType.
type PostProjectJSONRequestBody = ProjectCreateRequest

// PatchProjectUUIDJSONRequestBody defines body for PatchProjectUUID for application/json ContentType.
type PatchProjectUUIDJSONRequestBody = ProjectRequestParams

// PostProjectUUIDCatalogJSONRequestBody defines body for PostProjectUUIDCatalog for application/json ContentType.
type PostProjectUUIDCatalogJSONRequestBody PostProjectUUIDCatalogJSONBody

// PatchProjectUUIDDescriptionJSONRequestBody defines body for PatchProjectUUIDDescription for application/json ContentType.
type PatchProjectUUIDDescriptionJSONRequestBody PatchProjectUUIDDescriptionJSONBody

// PostProjectUUIDFieldEntityUUIDJSONRequestBody defines body for PostProjectUUIDFieldEntityUUID for application/json ContentType.
type PostProjectUUIDFieldEntityUUIDJSONRequestBody PostProjectUUIDFieldEntityUUIDJSONBody

// PatchProjectUUIDGraphJSONRequestBody defines body for PatchProjectUUIDGraph for application/json ContentType.
type PatchProjectUUIDGraphJSONRequestBody PatchProjectUUIDGraphJSONBody

// PatchProjectUUIDNameJSONRequestBody defines body for PatchProjectUUIDName for application/json ContentType.
type PatchProjectUUIDNameJSONRequestBody = NameRequest

// PatchProjectUUIDOptionsJSONRequestBody defines body for PatchProjectUUIDOptions for application/json ContentType.
type PatchProjectUUIDOptionsJSONRequestBody = ProjectRequestOptions

// PostProjectUUIDStatusJSONRequestBody defines body for PostProjectUUIDStatus for application/json ContentType.
type PostProjectUUIDStatusJSONRequestBody = ProjectStatusCreateRequest

// PatchProjectUUIDStatusEntityUUIDJSONRequestBody defines body for PatchProjectUUIDStatusEntityUUID for application/json ContentType.
type PatchProjectUUIDStatusEntityUUIDJSONRequestBody PatchProjectUUIDStatusEntityUUIDJSONBody

// PostProjectUUIDUserJSONRequestBody defines body for PostProjectUUIDUser for application/json ContentType.
type PostProjectUUIDUserJSONRequestBody = ProjectAddUserRequest

// PostTagJSONRequestBody defines body for PostTag for application/json ContentType.
type PostTagJSONRequestBody = TagCreateRequest

// PatchTagUUIDJSONRequestBody defines body for PatchTagUUID for application/json ContentType.
type PatchTagUUIDJSONRequestBody PatchTagUUIDJSONBody

// GetUserJSONRequestBody defines body for GetUser for application/json ContentType.
type GetUserJSONRequestBody = SearchUserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /company)
	PostCompany(ctx echo.Context) error

	// (DELETE /company/{UUID})
	DeleteCompanyUUID(ctx echo.Context, uUID Uuid) error

	// (GET /company/{UUID})
	GetCompanyUUID(ctx echo.Context, uUID Uuid) error

	// (GET /company/{UUID}/fields)
	GetCompanyUUIDFields(ctx echo.Context, uUID Uuid) error

	// (POST /company/{UUID}/fields)
	PostCompanyUUIDFields(ctx echo.Context, uUID Uuid) error

	// (DELETE /company/{UUID}/fields/{entityUUID})
	DeleteCompanyUUIDFieldsEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error

	// (PUT /company/{UUID}/fields/{entityUUID})
	PutCompanyUUIDFieldsEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error

	// (GET /company/{UUID}/group)
	GetCompanyUUIDGroup(ctx echo.Context, uUID Uuid) error

	// (POST /company/{UUID}/group)
	PostCompanyUUIDGroup(ctx echo.Context, uUID Uuid) error

	// (DELETE /company/{UUID}/group/{entityUUID})
	DeleteCompanyUUIDGroupEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error

	// (PATCH /company/{UUID}/group/{entityUUID})
	PatchCompanyUUIDGroupEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error

	// (PATCH /company/{UUID}/name)
	PatchCompanyUUIDName(ctx echo.Context, uUID Uuid) error

	// (GET /company/{UUID}/priorities)
	GetCompanyUUIDPriorities(ctx echo.Context, uUID Uuid) error

	// (POST /company/{UUID}/priorities)
	PostCompanyUUIDPriorities(ctx echo.Context, uUID Uuid) error

	// (DELETE /company/{UUID}/priorities/{entityUUID})
	DeleteCompanyUUIDPrioritiesEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error

	// (PATCH /company/{UUID}/priorities/{entityUUID})
	PatchCompanyUUIDPrioritiesEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error

	// (GET /company/{UUID}/project/catalog/{entityName})
	GetCompanyUUIDProjectCatalogEntityName(ctx echo.Context, uUID Uuid, entityName EntityName) error

	// (GET /company/{UUID}/sms)
	GetCompanyUUIDSms(ctx echo.Context, uUID Uuid, params GetCompanyUUIDSmsParams) error

	// (POST /company/{UUID}/sms/cost)
	PostCompanyUUIDSmsCost(ctx echo.Context, uUID Uuid) error

	// (POST /company/{UUID}/sms/options)
	PostCompanyUUIDSmsOptions(ctx echo.Context, uUID Uuid) error

	// (POST /company/{UUID}/sms/send)
	PostCompanyUUIDSmsSend(ctx echo.Context, uUID Uuid, params PostCompanyUUIDSmsSendParams) error

	// (POST /company/{UUID}/user)
	PostCompanyUUIDUser(ctx echo.Context, uUID Uuid) error

	// (DELETE /company/{UUID}/user/{userUUID})
	DeleteCompanyUUIDUserUserUUID(ctx echo.Context, uUID Uuid, userUUID UserUUID) error

	// (POST /federation)
	PostFederation(ctx echo.Context) error

	// (DELETE /federation/{UUID})
	DeleteFederationUUID(ctx echo.Context, uUID Uuid) error

	// (GET /federation/{UUID})
	GetFederationUUID(ctx echo.Context, uUID Uuid) error

	// (GET /federation/{UUID}/agent)
	GetFederationUUIDAgent(ctx echo.Context, uUID Uuid, params GetFederationUUIDAgentParams) error

	// (POST /federation/{UUID}/agent)
	PostFederationUUIDAgent(ctx echo.Context, uUID Uuid) error

	// (DELETE /federation/{UUID}/agent/{entityUUID})
	DeleteFederationUUIDAgentEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error

	// (PATCH /federation/{UUID}/agent/{entityUUID})
	PatchFederationUUIDAgentEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error

	// (GET /federation/{UUID}/invite)
	GetFederationUUIDInvite(ctx echo.Context, uUID Uuid) error

	// (POST /federation/{UUID}/invite)
	PostFederationUUIDInvite(ctx echo.Context, uUID Uuid) error

	// (DELETE /federation/{UUID}/invite/{entityUUID})
	DeleteFederationUUIDInviteEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error

	// (PATCH /federation/{UUID}/name)
	PatchFederationUUIDName(ctx echo.Context, uUID Uuid) error

	// (GET /federation/{UUID}/project)
	GetFederationUUIDProject(ctx echo.Context, uUID Uuid, params GetFederationUUIDProjectParams) error

	// (POST /federation/{UUID}/user)
	PostFederationUUIDUser(ctx echo.Context, uUID Uuid) error

	// (DELETE /federation/{UUID}/user/{userUUID})
	DeleteFederationUUIDUserUserUUID(ctx echo.Context, uUID Uuid, userUUID UserUUID) error

	// (DELETE /group/{UUID}/user)
	DeleteGroupUUIDUser(ctx echo.Context, uUID Uuid) error

	// (GET /group/{UUID}/user)
	GetGroupUUIDUser(ctx echo.Context, uUID Uuid) error

	// (POST /group/{UUID}/user)
	PostGroupUUIDUser(ctx echo.Context, uUID Uuid) error
	// Delete user by id
	// (DELETE /legal_entities)
	DeleteLegalEntities(ctx echo.Context) error
	// Get All Bank Accounts
	// (GET /legal_entities)
	GetLegalEntities(ctx echo.Context) error
	// Change users data
	// (PATCH /legal_entities)
	PatchLegalEntities(ctx echo.Context) error
	// Create new Bank Account
	// (POST /legal_entities)
	PostLegalEntities(ctx echo.Context) error

	// (POST /permissions)
	PostPermissions(ctx echo.Context) error

	// (DELETE /permissions/{UUID})
	DeletePermissionsUUID(ctx echo.Context, uUID Uuid) error

	// (GET /permissions/{UUID})
	GetPermissionsUUID(ctx echo.Context, uUID Uuid) error

	// (POST /profile/survey)
	PostProfileSurvey(ctx echo.Context) error

	// (DELETE /profile/survey/{UUID})
	DeleteProfileSurveyUUID(ctx echo.Context, uUID Uuid) error

	// (GET /profile/survey/{UUID})
	GetProfileSurveyUUID(ctx echo.Context, uUID Uuid) error

	// (POST /project)
	PostProject(ctx echo.Context) error

	// (DELETE /project/{UUID})
	DeleteProjectUUID(ctx echo.Context, uUID Uuid) error

	// (GET /project/{UUID})
	GetProjectUUID(ctx echo.Context, uUID Uuid) error

	// (PATCH /project/{UUID})
	PatchProjectUUID(ctx echo.Context, uUID Uuid) error

	// (GET /project/{UUID}/catalog)
	GetProjectUUIDCatalog(ctx echo.Context, uUID Uuid) error

	// (POST /project/{UUID}/catalog)
	PostProjectUUIDCatalog(ctx echo.Context, uUID Uuid) error

	// (GET /project/{UUID}/catalog/{entityName})
	GetProjectUUIDCatalogEntityName(ctx echo.Context, uUID Uuid, entityName EntityName) error

	// (DELETE /project/{UUID}/catalog/{entityUUID})
	DeleteProjectUUIDCatalogEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error

	// (PATCH /project/{UUID}/description)
	PatchProjectUUIDDescription(ctx echo.Context, uUID Uuid) error

	// (DELETE /project/{UUID}/field/{entityUUID})
	DeleteProjectUUIDFieldEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error

	// (POST /project/{UUID}/field/{entityUUID})
	PostProjectUUIDFieldEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error

	// (PATCH /project/{UUID}/graph)
	PatchProjectUUIDGraph(ctx echo.Context, uUID Uuid) error

	// (PATCH /project/{UUID}/name)
	PatchProjectUUIDName(ctx echo.Context, uUID Uuid) error

	// (PATCH /project/{UUID}/options)
	PatchProjectUUIDOptions(ctx echo.Context, uUID Uuid) error

	// (GET /project/{UUID}/status)
	GetProjectUUIDStatus(ctx echo.Context, uUID Uuid) error

	// (POST /project/{UUID}/status)
	PostProjectUUIDStatus(ctx echo.Context, uUID Uuid) error

	// (DELETE /project/{UUID}/status/{entityUUID})
	DeleteProjectUUIDStatusEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error

	// (PATCH /project/{UUID}/status/{entityUUID})
	PatchProjectUUIDStatusEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error

	// (POST /project/{UUID}/user)
	PostProjectUUIDUser(ctx echo.Context, uUID Uuid) error

	// (DELETE /project/{UUID}/user/{userUUID})
	DeleteProjectUUIDUserUserUUID(ctx echo.Context, uUID Uuid, userUUID UserUUID) error

	// (GET /tag)
	GetTag(ctx echo.Context, params GetTagParams) error

	// (POST /tag)
	PostTag(ctx echo.Context) error

	// (DELETE /tag/{UUID})
	DeleteTagUUID(ctx echo.Context, uUID Uuid) error

	// (PATCH /tag/{UUID})
	PatchTagUUID(ctx echo.Context, uUID Uuid) error

	// (GET /user)
	GetUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostCompany converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCompany(ctx)
	return err
}

// DeleteCompanyUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompanyUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCompanyUUID(ctx, uUID)
	return err
}

// GetCompanyUUID converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanyUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompanyUUID(ctx, uUID)
	return err
}

// GetCompanyUUIDFields converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanyUUIDFields(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompanyUUIDFields(ctx, uUID)
	return err
}

// PostCompanyUUIDFields converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompanyUUIDFields(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCompanyUUIDFields(ctx, uUID)
	return err
}

// DeleteCompanyUUIDFieldsEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompanyUUIDFieldsEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "entityUUID", runtime.ParamLocationPath, ctx.Param("entityUUID"), &entityUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCompanyUUIDFieldsEntityUUID(ctx, uUID, entityUUID)
	return err
}

// PutCompanyUUIDFieldsEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) PutCompanyUUIDFieldsEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "entityUUID", runtime.ParamLocationPath, ctx.Param("entityUUID"), &entityUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutCompanyUUIDFieldsEntityUUID(ctx, uUID, entityUUID)
	return err
}

// GetCompanyUUIDGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanyUUIDGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompanyUUIDGroup(ctx, uUID)
	return err
}

// PostCompanyUUIDGroup converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompanyUUIDGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCompanyUUIDGroup(ctx, uUID)
	return err
}

// DeleteCompanyUUIDGroupEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompanyUUIDGroupEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "entityUUID", runtime.ParamLocationPath, ctx.Param("entityUUID"), &entityUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCompanyUUIDGroupEntityUUID(ctx, uUID, entityUUID)
	return err
}

// PatchCompanyUUIDGroupEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchCompanyUUIDGroupEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "entityUUID", runtime.ParamLocationPath, ctx.Param("entityUUID"), &entityUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchCompanyUUIDGroupEntityUUID(ctx, uUID, entityUUID)
	return err
}

// PatchCompanyUUIDName converts echo context to params.
func (w *ServerInterfaceWrapper) PatchCompanyUUIDName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchCompanyUUIDName(ctx, uUID)
	return err
}

// GetCompanyUUIDPriorities converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanyUUIDPriorities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompanyUUIDPriorities(ctx, uUID)
	return err
}

// PostCompanyUUIDPriorities converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompanyUUIDPriorities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCompanyUUIDPriorities(ctx, uUID)
	return err
}

// DeleteCompanyUUIDPrioritiesEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompanyUUIDPrioritiesEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "entityUUID", runtime.ParamLocationPath, ctx.Param("entityUUID"), &entityUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCompanyUUIDPrioritiesEntityUUID(ctx, uUID, entityUUID)
	return err
}

// PatchCompanyUUIDPrioritiesEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchCompanyUUIDPrioritiesEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "entityUUID", runtime.ParamLocationPath, ctx.Param("entityUUID"), &entityUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchCompanyUUIDPrioritiesEntityUUID(ctx, uUID, entityUUID)
	return err
}

// GetCompanyUUIDProjectCatalogEntityName converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanyUUIDProjectCatalogEntityName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityName" -------------
	var entityName EntityName

	err = runtime.BindStyledParameterWithLocation("simple", false, "entityName", runtime.ParamLocationPath, ctx.Param("entityName"), &entityName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityName: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompanyUUIDProjectCatalogEntityName(ctx, uUID, entityName)
	return err
}

// GetCompanyUUIDSms converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanyUUIDSms(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCompanyUUIDSmsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "is_my" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_my", ctx.QueryParams(), &params.IsMy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_my: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompanyUUIDSms(ctx, uUID, params)
	return err
}

// PostCompanyUUIDSmsCost converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompanyUUIDSmsCost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCompanyUUIDSmsCost(ctx, uUID)
	return err
}

// PostCompanyUUIDSmsOptions converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompanyUUIDSmsOptions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCompanyUUIDSmsOptions(ctx, uUID)
	return err
}

// PostCompanyUUIDSmsSend converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompanyUUIDSmsSend(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostCompanyUUIDSmsSendParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "Mock-Sms" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Mock-Sms")]; found {
		var MockSms string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Mock-Sms, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Mock-Sms", runtime.ParamLocationHeader, valueList[0], &MockSms)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Mock-Sms: %s", err))
		}

		params.MockSms = &MockSms
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCompanyUUIDSmsSend(ctx, uUID, params)
	return err
}

// PostCompanyUUIDUser converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompanyUUIDUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCompanyUUIDUser(ctx, uUID)
	return err
}

// DeleteCompanyUUIDUserUserUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompanyUUIDUserUserUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "userUUID" -------------
	var userUUID UserUUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, ctx.Param("userUUID"), &userUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCompanyUUIDUserUserUUID(ctx, uUID, userUUID)
	return err
}

// PostFederation converts echo context to params.
func (w *ServerInterfaceWrapper) PostFederation(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFederation(ctx)
	return err
}

// DeleteFederationUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFederationUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteFederationUUID(ctx, uUID)
	return err
}

// GetFederationUUID converts echo context to params.
func (w *ServerInterfaceWrapper) GetFederationUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFederationUUID(ctx, uUID)
	return err
}

// GetFederationUUIDAgent converts echo context to params.
func (w *ServerInterfaceWrapper) GetFederationUUIDAgent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFederationUUIDAgentParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFederationUUIDAgent(ctx, uUID, params)
	return err
}

// PostFederationUUIDAgent converts echo context to params.
func (w *ServerInterfaceWrapper) PostFederationUUIDAgent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFederationUUIDAgent(ctx, uUID)
	return err
}

// DeleteFederationUUIDAgentEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFederationUUIDAgentEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "entityUUID", runtime.ParamLocationPath, ctx.Param("entityUUID"), &entityUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteFederationUUIDAgentEntityUUID(ctx, uUID, entityUUID)
	return err
}

// PatchFederationUUIDAgentEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchFederationUUIDAgentEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "entityUUID", runtime.ParamLocationPath, ctx.Param("entityUUID"), &entityUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchFederationUUIDAgentEntityUUID(ctx, uUID, entityUUID)
	return err
}

// GetFederationUUIDInvite converts echo context to params.
func (w *ServerInterfaceWrapper) GetFederationUUIDInvite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFederationUUIDInvite(ctx, uUID)
	return err
}

// PostFederationUUIDInvite converts echo context to params.
func (w *ServerInterfaceWrapper) PostFederationUUIDInvite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFederationUUIDInvite(ctx, uUID)
	return err
}

// DeleteFederationUUIDInviteEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFederationUUIDInviteEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "entityUUID", runtime.ParamLocationPath, ctx.Param("entityUUID"), &entityUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteFederationUUIDInviteEntityUUID(ctx, uUID, entityUUID)
	return err
}

// PatchFederationUUIDName converts echo context to params.
func (w *ServerInterfaceWrapper) PatchFederationUUIDName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchFederationUUIDName(ctx, uUID)
	return err
}

// GetFederationUUIDProject converts echo context to params.
func (w *ServerInterfaceWrapper) GetFederationUUIDProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFederationUUIDProjectParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "company_uuid" -------------

	err = runtime.BindQueryParameter("form", true, false, "company_uuid", ctx.QueryParams(), &params.CompanyUuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_uuid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFederationUUIDProject(ctx, uUID, params)
	return err
}

// PostFederationUUIDUser converts echo context to params.
func (w *ServerInterfaceWrapper) PostFederationUUIDUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFederationUUIDUser(ctx, uUID)
	return err
}

// DeleteFederationUUIDUserUserUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFederationUUIDUserUserUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "userUUID" -------------
	var userUUID UserUUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, ctx.Param("userUUID"), &userUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteFederationUUIDUserUserUUID(ctx, uUID, userUUID)
	return err
}

// DeleteGroupUUIDUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteGroupUUIDUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteGroupUUIDUser(ctx, uUID)
	return err
}

// GetGroupUUIDUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroupUUIDUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGroupUUIDUser(ctx, uUID)
	return err
}

// PostGroupUUIDUser converts echo context to params.
func (w *ServerInterfaceWrapper) PostGroupUUIDUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostGroupUUIDUser(ctx, uUID)
	return err
}

// DeleteLegalEntities converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLegalEntities(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLegalEntities(ctx)
	return err
}

// GetLegalEntities converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntities(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntities(ctx)
	return err
}

// PatchLegalEntities converts echo context to params.
func (w *ServerInterfaceWrapper) PatchLegalEntities(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchLegalEntities(ctx)
	return err
}

// PostLegalEntities converts echo context to params.
func (w *ServerInterfaceWrapper) PostLegalEntities(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLegalEntities(ctx)
	return err
}

// PostPermissions converts echo context to params.
func (w *ServerInterfaceWrapper) PostPermissions(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPermissions(ctx)
	return err
}

// DeletePermissionsUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePermissionsUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePermissionsUUID(ctx, uUID)
	return err
}

// GetPermissionsUUID converts echo context to params.
func (w *ServerInterfaceWrapper) GetPermissionsUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPermissionsUUID(ctx, uUID)
	return err
}

// PostProfileSurvey converts echo context to params.
func (w *ServerInterfaceWrapper) PostProfileSurvey(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProfileSurvey(ctx)
	return err
}

// DeleteProfileSurveyUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProfileSurveyUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProfileSurveyUUID(ctx, uUID)
	return err
}

// GetProfileSurveyUUID converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfileSurveyUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfileSurveyUUID(ctx, uUID)
	return err
}

// PostProject converts echo context to params.
func (w *ServerInterfaceWrapper) PostProject(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProject(ctx)
	return err
}

// DeleteProjectUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProjectUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProjectUUID(ctx, uUID)
	return err
}

// GetProjectUUID converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjectUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProjectUUID(ctx, uUID)
	return err
}

// PatchProjectUUID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProjectUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchProjectUUID(ctx, uUID)
	return err
}

// GetProjectUUIDCatalog converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjectUUIDCatalog(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProjectUUIDCatalog(ctx, uUID)
	return err
}

// PostProjectUUIDCatalog converts echo context to params.
func (w *ServerInterfaceWrapper) PostProjectUUIDCatalog(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProjectUUIDCatalog(ctx, uUID)
	return err
}

// GetProjectUUIDCatalogEntityName converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjectUUIDCatalogEntityName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityName" -------------
	var entityName EntityName

	err = runtime.BindStyledParameterWithLocation("simple", false, "entityName", runtime.ParamLocationPath, ctx.Param("entityName"), &entityName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityName: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProjectUUIDCatalogEntityName(ctx, uUID, entityName)
	return err
}

// DeleteProjectUUIDCatalogEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProjectUUIDCatalogEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "entityUUID", runtime.ParamLocationPath, ctx.Param("entityUUID"), &entityUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProjectUUIDCatalogEntityUUID(ctx, uUID, entityUUID)
	return err
}

// PatchProjectUUIDDescription converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProjectUUIDDescription(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchProjectUUIDDescription(ctx, uUID)
	return err
}

// DeleteProjectUUIDFieldEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProjectUUIDFieldEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "entityUUID", runtime.ParamLocationPath, ctx.Param("entityUUID"), &entityUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProjectUUIDFieldEntityUUID(ctx, uUID, entityUUID)
	return err
}

// PostProjectUUIDFieldEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) PostProjectUUIDFieldEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "entityUUID", runtime.ParamLocationPath, ctx.Param("entityUUID"), &entityUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProjectUUIDFieldEntityUUID(ctx, uUID, entityUUID)
	return err
}

// PatchProjectUUIDGraph converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProjectUUIDGraph(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchProjectUUIDGraph(ctx, uUID)
	return err
}

// PatchProjectUUIDName converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProjectUUIDName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchProjectUUIDName(ctx, uUID)
	return err
}

// PatchProjectUUIDOptions converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProjectUUIDOptions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchProjectUUIDOptions(ctx, uUID)
	return err
}

// GetProjectUUIDStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjectUUIDStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProjectUUIDStatus(ctx, uUID)
	return err
}

// PostProjectUUIDStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostProjectUUIDStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProjectUUIDStatus(ctx, uUID)
	return err
}

// DeleteProjectUUIDStatusEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProjectUUIDStatusEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "entityUUID", runtime.ParamLocationPath, ctx.Param("entityUUID"), &entityUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProjectUUIDStatusEntityUUID(ctx, uUID, entityUUID)
	return err
}

// PatchProjectUUIDStatusEntityUUID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchProjectUUIDStatusEntityUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "entityUUID" -------------
	var entityUUID EntityUUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "entityUUID", runtime.ParamLocationPath, ctx.Param("entityUUID"), &entityUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entityUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchProjectUUIDStatusEntityUUID(ctx, uUID, entityUUID)
	return err
}

// PostProjectUUIDUser converts echo context to params.
func (w *ServerInterfaceWrapper) PostProjectUUIDUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProjectUUIDUser(ctx, uUID)
	return err
}

// DeleteProjectUUIDUserUserUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProjectUUIDUserUserUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	// ------------- Path parameter "userUUID" -------------
	var userUUID UserUUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, ctx.Param("userUUID"), &userUUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userUUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProjectUUIDUserUserUUID(ctx, uUID, userUUID)
	return err
}

// GetTag converts echo context to params.
func (w *ServerInterfaceWrapper) GetTag(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagParams
	// ------------- Required query parameter "company_uuid" -------------

	err = runtime.BindQueryParameter("form", true, true, "company_uuid", ctx.QueryParams(), &params.CompanyUuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_uuid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTag(ctx, params)
	return err
}

// PostTag converts echo context to params.
func (w *ServerInterfaceWrapper) PostTag(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTag(ctx)
	return err
}

// DeleteTagUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTagUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTagUUID(ctx, uUID)
	return err
}

// PatchTagUUID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTagUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "UUID" -------------
	var uUID Uuid

	err = runtime.BindStyledParameterWithLocation("simple", false, "UUID", runtime.ParamLocationPath, ctx.Param("UUID"), &uUID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UUID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTagUUID(ctx, uUID)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/company", wrapper.PostCompany)
	router.DELETE(baseURL+"/company/:UUID", wrapper.DeleteCompanyUUID)
	router.GET(baseURL+"/company/:UUID", wrapper.GetCompanyUUID)
	router.GET(baseURL+"/company/:UUID/fields", wrapper.GetCompanyUUIDFields)
	router.POST(baseURL+"/company/:UUID/fields", wrapper.PostCompanyUUIDFields)
	router.DELETE(baseURL+"/company/:UUID/fields/:entityUUID", wrapper.DeleteCompanyUUIDFieldsEntityUUID)
	router.PUT(baseURL+"/company/:UUID/fields/:entityUUID", wrapper.PutCompanyUUIDFieldsEntityUUID)
	router.GET(baseURL+"/company/:UUID/group", wrapper.GetCompanyUUIDGroup)
	router.POST(baseURL+"/company/:UUID/group", wrapper.PostCompanyUUIDGroup)
	router.DELETE(baseURL+"/company/:UUID/group/:entityUUID", wrapper.DeleteCompanyUUIDGroupEntityUUID)
	router.PATCH(baseURL+"/company/:UUID/group/:entityUUID", wrapper.PatchCompanyUUIDGroupEntityUUID)
	router.PATCH(baseURL+"/company/:UUID/name", wrapper.PatchCompanyUUIDName)
	router.GET(baseURL+"/company/:UUID/priorities", wrapper.GetCompanyUUIDPriorities)
	router.POST(baseURL+"/company/:UUID/priorities", wrapper.PostCompanyUUIDPriorities)
	router.DELETE(baseURL+"/company/:UUID/priorities/:entityUUID", wrapper.DeleteCompanyUUIDPrioritiesEntityUUID)
	router.PATCH(baseURL+"/company/:UUID/priorities/:entityUUID", wrapper.PatchCompanyUUIDPrioritiesEntityUUID)
	router.GET(baseURL+"/company/:UUID/project/catalog/:entityName", wrapper.GetCompanyUUIDProjectCatalogEntityName)
	router.GET(baseURL+"/company/:UUID/sms", wrapper.GetCompanyUUIDSms)
	router.POST(baseURL+"/company/:UUID/sms/cost", wrapper.PostCompanyUUIDSmsCost)
	router.POST(baseURL+"/company/:UUID/sms/options", wrapper.PostCompanyUUIDSmsOptions)
	router.POST(baseURL+"/company/:UUID/sms/send", wrapper.PostCompanyUUIDSmsSend)
	router.POST(baseURL+"/company/:UUID/user", wrapper.PostCompanyUUIDUser)
	router.DELETE(baseURL+"/company/:UUID/user/:userUUID", wrapper.DeleteCompanyUUIDUserUserUUID)
	router.POST(baseURL+"/federation", wrapper.PostFederation)
	router.DELETE(baseURL+"/federation/:UUID", wrapper.DeleteFederationUUID)
	router.GET(baseURL+"/federation/:UUID", wrapper.GetFederationUUID)
	router.GET(baseURL+"/federation/:UUID/agent", wrapper.GetFederationUUIDAgent)
	router.POST(baseURL+"/federation/:UUID/agent", wrapper.PostFederationUUIDAgent)
	router.DELETE(baseURL+"/federation/:UUID/agent/:entityUUID", wrapper.DeleteFederationUUIDAgentEntityUUID)
	router.PATCH(baseURL+"/federation/:UUID/agent/:entityUUID", wrapper.PatchFederationUUIDAgentEntityUUID)
	router.GET(baseURL+"/federation/:UUID/invite", wrapper.GetFederationUUIDInvite)
	router.POST(baseURL+"/federation/:UUID/invite", wrapper.PostFederationUUIDInvite)
	router.DELETE(baseURL+"/federation/:UUID/invite/:entityUUID", wrapper.DeleteFederationUUIDInviteEntityUUID)
	router.PATCH(baseURL+"/federation/:UUID/name", wrapper.PatchFederationUUIDName)
	router.GET(baseURL+"/federation/:UUID/project", wrapper.GetFederationUUIDProject)
	router.POST(baseURL+"/federation/:UUID/user", wrapper.PostFederationUUIDUser)
	router.DELETE(baseURL+"/federation/:UUID/user/:userUUID", wrapper.DeleteFederationUUIDUserUserUUID)
	router.DELETE(baseURL+"/group/:UUID/user", wrapper.DeleteGroupUUIDUser)
	router.GET(baseURL+"/group/:UUID/user", wrapper.GetGroupUUIDUser)
	router.POST(baseURL+"/group/:UUID/user", wrapper.PostGroupUUIDUser)
	router.DELETE(baseURL+"/legal_entities", wrapper.DeleteLegalEntities)
	router.GET(baseURL+"/legal_entities", wrapper.GetLegalEntities)
	router.PATCH(baseURL+"/legal_entities", wrapper.PatchLegalEntities)
	router.POST(baseURL+"/legal_entities", wrapper.PostLegalEntities)
	router.POST(baseURL+"/permissions", wrapper.PostPermissions)
	router.DELETE(baseURL+"/permissions/:UUID", wrapper.DeletePermissionsUUID)
	router.GET(baseURL+"/permissions/:UUID", wrapper.GetPermissionsUUID)
	router.POST(baseURL+"/profile/survey", wrapper.PostProfileSurvey)
	router.DELETE(baseURL+"/profile/survey/:UUID", wrapper.DeleteProfileSurveyUUID)
	router.GET(baseURL+"/profile/survey/:UUID", wrapper.GetProfileSurveyUUID)
	router.POST(baseURL+"/project", wrapper.PostProject)
	router.DELETE(baseURL+"/project/:UUID", wrapper.DeleteProjectUUID)
	router.GET(baseURL+"/project/:UUID", wrapper.GetProjectUUID)
	router.PATCH(baseURL+"/project/:UUID", wrapper.PatchProjectUUID)
	router.GET(baseURL+"/project/:UUID/catalog", wrapper.GetProjectUUIDCatalog)
	router.POST(baseURL+"/project/:UUID/catalog", wrapper.PostProjectUUIDCatalog)
	router.GET(baseURL+"/project/:UUID/catalog/:entityName", wrapper.GetProjectUUIDCatalogEntityName)
	router.DELETE(baseURL+"/project/:UUID/catalog/:entityUUID", wrapper.DeleteProjectUUIDCatalogEntityUUID)
	router.PATCH(baseURL+"/project/:UUID/description", wrapper.PatchProjectUUIDDescription)
	router.DELETE(baseURL+"/project/:UUID/field/:entityUUID", wrapper.DeleteProjectUUIDFieldEntityUUID)
	router.POST(baseURL+"/project/:UUID/field/:entityUUID", wrapper.PostProjectUUIDFieldEntityUUID)
	router.PATCH(baseURL+"/project/:UUID/graph", wrapper.PatchProjectUUIDGraph)
	router.PATCH(baseURL+"/project/:UUID/name", wrapper.PatchProjectUUIDName)
	router.PATCH(baseURL+"/project/:UUID/options", wrapper.PatchProjectUUIDOptions)
	router.GET(baseURL+"/project/:UUID/status", wrapper.GetProjectUUIDStatus)
	router.POST(baseURL+"/project/:UUID/status", wrapper.PostProjectUUIDStatus)
	router.DELETE(baseURL+"/project/:UUID/status/:entityUUID", wrapper.DeleteProjectUUIDStatusEntityUUID)
	router.PATCH(baseURL+"/project/:UUID/status/:entityUUID", wrapper.PatchProjectUUIDStatusEntityUUID)
	router.POST(baseURL+"/project/:UUID/user", wrapper.PostProjectUUIDUser)
	router.DELETE(baseURL+"/project/:UUID/user/:userUUID", wrapper.DeleteProjectUUIDUserUserUUID)
	router.GET(baseURL+"/tag", wrapper.GetTag)
	router.POST(baseURL+"/tag", wrapper.PostTag)
	router.DELETE(baseURL+"/tag/:UUID", wrapper.DeleteTagUUID)
	router.PATCH(baseURL+"/tag/:UUID", wrapper.PatchTagUUID)
	router.GET(baseURL+"/user", wrapper.GetUser)

}

type PostCompanyRequestObject struct {
	Body *PostCompanyJSONRequestBody
}

type PostCompanyResponseObject interface {
	VisitPostCompanyResponse(w http.ResponseWriter) error
}

type PostCompany200JSONResponse UUIDResponse

func (response PostCompany200JSONResponse) VisitPostCompanyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCompanyUUIDRequestObject struct {
	UUID Uuid `json:"UUID"`
}

type DeleteCompanyUUIDResponseObject interface {
	VisitDeleteCompanyUUIDResponse(w http.ResponseWriter) error
}

type DeleteCompanyUUID200Response struct {
}

func (response DeleteCompanyUUID200Response) VisitDeleteCompanyUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetCompanyUUIDRequestObject struct {
	UUID Uuid `json:"UUID"`
}

type GetCompanyUUIDResponseObject interface {
	VisitGetCompanyUUIDResponse(w http.ResponseWriter) error
}

type GetCompanyUUID200JSONResponse CompanyDTO

func (response GetCompanyUUID200JSONResponse) VisitGetCompanyUUIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCompanyUUIDFieldsRequestObject struct {
	UUID Uuid `json:"UUID"`
}

type GetCompanyUUIDFieldsResponseObject interface {
	VisitGetCompanyUUIDFieldsResponse(w http.ResponseWriter) error
}

type GetCompanyUUIDFields200JSONResponse struct {
	Count int               `json:"count"`
	Items []CompanyFieldDTO `json:"items"`
}

func (response GetCompanyUUIDFields200JSONResponse) VisitGetCompanyUUIDFieldsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCompanyUUIDFieldsRequestObject struct {
	UUID Uuid `json:"UUID"`
	Body *PostCompanyUUIDFieldsJSONRequestBody
}

type PostCompanyUUIDFieldsResponseObject interface {
	VisitPostCompanyUUIDFieldsResponse(w http.ResponseWriter) error
}

type PostCompanyUUIDFields200JSONResponse struct {
	Hash            string               `json:"hash"`
	Icon            string               `json:"icon"`
	Type            domain.FieldDataType `json:"type"`
	TypeDescription string               `json:"type_description"`
	TypeUuid        *openapi_types.UUID  `json:"type_uuid,omitempty"`
	Uuid            string               `json:"uuid"`
}

func (response PostCompanyUUIDFields200JSONResponse) VisitPostCompanyUUIDFieldsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCompanyUUIDFieldsEntityUUIDRequestObject struct {
	UUID       Uuid       `json:"UUID"`
	EntityUUID EntityUUID `json:"entityUUID"`
}

type DeleteCompanyUUIDFieldsEntityUUIDResponseObject interface {
	VisitDeleteCompanyUUIDFieldsEntityUUIDResponse(w http.ResponseWriter) error
}

type DeleteCompanyUUIDFieldsEntityUUID200Response struct {
}

func (response DeleteCompanyUUIDFieldsEntityUUID200Response) VisitDeleteCompanyUUIDFieldsEntityUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PutCompanyUUIDFieldsEntityUUIDRequestObject struct {
	UUID       Uuid       `json:"UUID"`
	EntityUUID EntityUUID `json:"entityUUID"`
	Body       *PutCompanyUUIDFieldsEntityUUIDJSONRequestBody
}

type PutCompanyUUIDFieldsEntityUUIDResponseObject interface {
	VisitPutCompanyUUIDFieldsEntityUUIDResponse(w http.ResponseWriter) error
}

type PutCompanyUUIDFieldsEntityUUID200Response struct {
}

func (response PutCompanyUUIDFieldsEntityUUID200Response) VisitPutCompanyUUIDFieldsEntityUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetCompanyUUIDGroupRequestObject struct {
	UUID Uuid `json:"UUID"`
}

type GetCompanyUUIDGroupResponseObject interface {
	VisitGetCompanyUUIDGroupResponse(w http.ResponseWriter) error
}

type GetCompanyUUIDGroup200JSONResponse struct {
	Count int        `json:"count"`
	Items []GroupDTO `json:"items"`
}

func (response GetCompanyUUIDGroup200JSONResponse) VisitGetCompanyUUIDGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCompanyUUIDGroupRequestObject struct {
	UUID Uuid `json:"UUID"`
	Body *PostCompanyUUIDGroupJSONRequestBody
}

type PostCompanyUUIDGroupResponseObject interface {
	VisitPostCompanyUUIDGroupResponse(w http.ResponseWriter) error
}

type PostCompanyUUIDGroup200JSONResponse UUIDResponse

func (response PostCompanyUUIDGroup200JSONResponse) VisitPostCompanyUUIDGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCompanyUUIDGroupEntityUUIDRequestObject struct {
	UUID       Uuid       `json:"UUID"`
	EntityUUID EntityUUID `json:"entityUUID"`
}

type DeleteCompanyUUIDGroupEntityUUIDResponseObject interface {
	VisitDeleteCompanyUUIDGroupEntityUUIDResponse(w http.ResponseWriter) error
}

type DeleteCompanyUUIDGroupEntityUUID200Response struct {
}

func (response DeleteCompanyUUIDGroupEntityUUID200Response) VisitDeleteCompanyUUIDGroupEntityUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PatchCompanyUUIDGroupEntityUUIDRequestObject struct {
	UUID       Uuid       `json:"UUID"`
	EntityUUID EntityUUID `json:"entityUUID"`
	Body       *PatchCompanyUUIDGroupEntityUUIDJSONRequestBody
}

type PatchCompanyUUIDGroupEntityUUIDResponseObject interface {
	VisitPatchCompanyUUIDGroupEntityUUIDResponse(w http.ResponseWriter) error
}

type PatchCompanyUUIDGroupEntityUUID200Response struct {
}

func (response PatchCompanyUUIDGroupEntityUUID200Response) VisitPatchCompanyUUIDGroupEntityUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PatchCompanyUUIDNameRequestObject struct {
	UUID Uuid `json:"UUID"`
	Body *PatchCompanyUUIDNameJSONRequestBody
}

type PatchCompanyUUIDNameResponseObject interface {
	VisitPatchCompanyUUIDNameResponse(w http.ResponseWriter) error
}

type PatchCompanyUUIDName200Response struct {
}

func (response PatchCompanyUUIDName200Response) VisitPatchCompanyUUIDNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetCompanyUUIDPrioritiesRequestObject struct {
	UUID Uuid `json:"UUID"`
}

type GetCompanyUUIDPrioritiesResponseObject interface {
	VisitGetCompanyUUIDPrioritiesResponse(w http.ResponseWriter) error
}

type GetCompanyUUIDPriorities200JSONResponse struct {
	Count int                  `json:"count"`
	Items []CompanyPriorityDTO `json:"items"`
}

func (response GetCompanyUUIDPriorities200JSONResponse) VisitGetCompanyUUIDPrioritiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCompanyUUIDPrioritiesRequestObject struct {
	UUID Uuid `json:"UUID"`
	Body *PostCompanyUUIDPrioritiesJSONRequestBody
}

type PostCompanyUUIDPrioritiesResponseObject interface {
	VisitPostCompanyUUIDPrioritiesResponse(w http.ResponseWriter) error
}

type PostCompanyUUIDPriorities200JSONResponse UUIDResponse

func (response PostCompanyUUIDPriorities200JSONResponse) VisitPostCompanyUUIDPrioritiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCompanyUUIDPrioritiesEntityUUIDRequestObject struct {
	UUID       Uuid       `json:"UUID"`
	EntityUUID EntityUUID `json:"entityUUID"`
}

type DeleteCompanyUUIDPrioritiesEntityUUIDResponseObject interface {
	VisitDeleteCompanyUUIDPrioritiesEntityUUIDResponse(w http.ResponseWriter) error
}

type DeleteCompanyUUIDPrioritiesEntityUUID200Response struct {
}

func (response DeleteCompanyUUIDPrioritiesEntityUUID200Response) VisitDeleteCompanyUUIDPrioritiesEntityUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PatchCompanyUUIDPrioritiesEntityUUIDRequestObject struct {
	UUID       Uuid       `json:"UUID"`
	EntityUUID EntityUUID `json:"entityUUID"`
	Body       *PatchCompanyUUIDPrioritiesEntityUUIDJSONRequestBody
}

type PatchCompanyUUIDPrioritiesEntityUUIDResponseObject interface {
	VisitPatchCompanyUUIDPrioritiesEntityUUIDResponse(w http.ResponseWriter) error
}

type PatchCompanyUUIDPrioritiesEntityUUID200Response struct {
}

func (response PatchCompanyUUIDPrioritiesEntityUUID200Response) VisitPatchCompanyUUIDPrioritiesEntityUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetCompanyUUIDProjectCatalogEntityNameRequestObject struct {
	UUID       Uuid       `json:"UUID"`
	EntityName EntityName `json:"entityName"`
}

type GetCompanyUUIDProjectCatalogEntityNameResponseObject interface {
	VisitGetCompanyUUIDProjectCatalogEntityNameResponse(w http.ResponseWriter) error
}

type GetCompanyUUIDProjectCatalogEntityName200JSONResponse struct {
	Count int                     `json:"count"`
	Items []ProjectCatalogDataDTO `json:"items"`
}

func (response GetCompanyUUIDProjectCatalogEntityName200JSONResponse) VisitGetCompanyUUIDProjectCatalogEntityNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCompanyUUIDSmsRequestObject struct {
	UUID   Uuid `json:"UUID"`
	Params GetCompanyUUIDSmsParams
}

type GetCompanyUUIDSmsResponseObject interface {
	VisitGetCompanyUUIDSmsResponse(w http.ResponseWriter) error
}

type GetCompanyUUIDSms200JSONResponse struct {
	Count int      `json:"count"`
	Items []SmsDTO `json:"items"`
	Total int64    `json:"total"`
}

func (response GetCompanyUUIDSms200JSONResponse) VisitGetCompanyUUIDSmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCompanyUUIDSmsCostRequestObject struct {
	UUID Uuid `json:"UUID"`
	Body *PostCompanyUUIDSmsCostJSONRequestBody
}

type PostCompanyUUIDSmsCostResponseObject interface {
	VisitPostCompanyUUIDSmsCostResponse(w http.ResponseWriter) error
}

type PostCompanyUUIDSmsCost200JSONResponse map[string]interface{}

func (response PostCompanyUUIDSmsCost200JSONResponse) VisitPostCompanyUUIDSmsCostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCompanyUUIDSmsOptionsRequestObject struct {
	UUID Uuid `json:"UUID"`
	Body *PostCompanyUUIDSmsOptionsJSONRequestBody
}

type PostCompanyUUIDSmsOptionsResponseObject interface {
	VisitPostCompanyUUIDSmsOptionsResponse(w http.ResponseWriter) error
}

type PostCompanyUUIDSmsOptions200Response struct {
}

func (response PostCompanyUUIDSmsOptions200Response) VisitPostCompanyUUIDSmsOptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostCompanyUUIDSmsSendRequestObject struct {
	UUID   Uuid `json:"UUID"`
	Params PostCompanyUUIDSmsSendParams
	Body   *PostCompanyUUIDSmsSendJSONRequestBody
}

type PostCompanyUUIDSmsSendResponseObject interface {
	VisitPostCompanyUUIDSmsSendResponse(w http.ResponseWriter) error
}

type PostCompanyUUIDSmsSend200JSONResponse map[string]interface{}

func (response PostCompanyUUIDSmsSend200JSONResponse) VisitPostCompanyUUIDSmsSendResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCompanyUUIDUserRequestObject struct {
	UUID Uuid `json:"UUID"`
	Body *PostCompanyUUIDUserJSONRequestBody
}

type PostCompanyUUIDUserResponseObject interface {
	VisitPostCompanyUUIDUserResponse(w http.ResponseWriter) error
}

type PostCompanyUUIDUser200JSONResponse UUIDResponse

func (response PostCompanyUUIDUser200JSONResponse) VisitPostCompanyUUIDUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCompanyUUIDUserUserUUIDRequestObject struct {
	UUID     Uuid     `json:"UUID"`
	UserUUID UserUUID `json:"userUUID"`
}

type DeleteCompanyUUIDUserUserUUIDResponseObject interface {
	VisitDeleteCompanyUUIDUserUserUUIDResponse(w http.ResponseWriter) error
}

type DeleteCompanyUUIDUserUserUUID200Response struct {
}

func (response DeleteCompanyUUIDUserUserUUID200Response) VisitDeleteCompanyUUIDUserUserUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostFederationRequestObject struct {
	Body *PostFederationJSONRequestBody
}

type PostFederationResponseObject interface {
	VisitPostFederationResponse(w http.ResponseWriter) error
}

type PostFederation200JSONResponse UUIDResponse

func (response PostFederation200JSONResponse) VisitPostFederationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFederationUUIDRequestObject struct {
	UUID Uuid `json:"UUID"`
}

type DeleteFederationUUIDResponseObject interface {
	VisitDeleteFederationUUIDResponse(w http.ResponseWriter) error
}

type DeleteFederationUUID200Response struct {
}

func (response DeleteFederationUUID200Response) VisitDeleteFederationUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteFederationUUID401Response struct {
}

func (response DeleteFederationUUID401Response) VisitDeleteFederationUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetFederationUUIDRequestObject struct {
	UUID Uuid `json:"UUID"`
}

type GetFederationUUIDResponseObject interface {
	VisitGetFederationUUIDResponse(w http.ResponseWriter) error
}

type GetFederationUUID200JSONResponse FederationDTO

func (response GetFederationUUID200JSONResponse) VisitGetFederationUUIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFederationUUIDAgentRequestObject struct {
	UUID   Uuid `json:"UUID"`
	Params GetFederationUUIDAgentParams
}

type GetFederationUUIDAgentResponseObject interface {
	VisitGetFederationUUIDAgentResponse(w http.ResponseWriter) error
}

type GetFederationUUIDAgent200JSONResponse struct {
	Count int        `json:"count"`
	Items []AgentDTO `json:"items"`
	Total int64      `json:"total"`
}

func (response GetFederationUUIDAgent200JSONResponse) VisitGetFederationUUIDAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostFederationUUIDAgentRequestObject struct {
	UUID Uuid `json:"UUID"`
	Body *PostFederationUUIDAgentJSONRequestBody
}

type PostFederationUUIDAgentResponseObject interface {
	VisitPostFederationUUIDAgentResponse(w http.ResponseWriter) error
}

type PostFederationUUIDAgent200JSONResponse UUIDResponse

func (response PostFederationUUIDAgent200JSONResponse) VisitPostFederationUUIDAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFederationUUIDAgentEntityUUIDRequestObject struct {
	UUID       Uuid       `json:"UUID"`
	EntityUUID EntityUUID `json:"entityUUID"`
}

type DeleteFederationUUIDAgentEntityUUIDResponseObject interface {
	VisitDeleteFederationUUIDAgentEntityUUIDResponse(w http.ResponseWriter) error
}

type DeleteFederationUUIDAgentEntityUUID200Response struct {
}

func (response DeleteFederationUUIDAgentEntityUUID200Response) VisitDeleteFederationUUIDAgentEntityUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PatchFederationUUIDAgentEntityUUIDRequestObject struct {
	UUID       Uuid       `json:"UUID"`
	EntityUUID EntityUUID `json:"entityUUID"`
	Body       *PatchFederationUUIDAgentEntityUUIDJSONRequestBody
}

type PatchFederationUUIDAgentEntityUUIDResponseObject interface {
	VisitPatchFederationUUIDAgentEntityUUIDResponse(w http.ResponseWriter) error
}

type PatchFederationUUIDAgentEntityUUID200Response struct {
}

func (response PatchFederationUUIDAgentEntityUUID200Response) VisitPatchFederationUUIDAgentEntityUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetFederationUUIDInviteRequestObject struct {
	UUID Uuid `json:"UUID"`
}

type GetFederationUUIDInviteResponseObject interface {
	VisitGetFederationUUIDInviteResponse(w http.ResponseWriter) error
}

type GetFederationUUIDInvite200JSONResponse struct {
	Count int         `json:"count"`
	Items []InviteDTO `json:"items"`
}

func (response GetFederationUUIDInvite200JSONResponse) VisitGetFederationUUIDInviteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostFederationUUIDInviteRequestObject struct {
	UUID Uuid `json:"UUID"`
	Body *PostFederationUUIDInviteJSONRequestBody
}

type PostFederationUUIDInviteResponseObject interface {
	VisitPostFederationUUIDInviteResponse(w http.ResponseWriter) error
}

type PostFederationUUIDInvite200JSONResponse UUIDResponse

func (response PostFederationUUIDInvite200JSONResponse) VisitPostFederationUUIDInviteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFederationUUIDInviteEntityUUIDRequestObject struct {
	UUID       Uuid       `json:"UUID"`
	EntityUUID EntityUUID `json:"entityUUID"`
}

type DeleteFederationUUIDInviteEntityUUIDResponseObject interface {
	VisitDeleteFederationUUIDInviteEntityUUIDResponse(w http.ResponseWriter) error
}

type DeleteFederationUUIDInviteEntityUUID200Response struct {
}

func (response DeleteFederationUUIDInviteEntityUUID200Response) VisitDeleteFederationUUIDInviteEntityUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PatchFederationUUIDNameRequestObject struct {
	UUID Uuid `json:"UUID"`
	Body *PatchFederationUUIDNameJSONRequestBody
}

type PatchFederationUUIDNameResponseObject interface {
	VisitPatchFederationUUIDNameResponse(w http.ResponseWriter) error
}

type PatchFederationUUIDName200Response struct {
}

func (response PatchFederationUUIDName200Response) VisitPatchFederationUUIDNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetFederationUUIDProjectRequestObject struct {
	UUID   Uuid `json:"UUID"`
	Params GetFederationUUIDProjectParams
}

type GetFederationUUIDProjectResponseObject interface {
	VisitGetFederationUUIDProjectResponse(w http.ResponseWriter) error
}

type GetFederationUUIDProject200JSONResponse struct {
	Count int          `json:"count"`
	Items []ProjectDTO `json:"items"`
}

func (response GetFederationUUIDProject200JSONResponse) VisitGetFederationUUIDProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostFederationUUIDUserRequestObject struct {
	UUID Uuid `json:"UUID"`
	Body *PostFederationUUIDUserJSONRequestBody
}

type PostFederationUUIDUserResponseObject interface {
	VisitPostFederationUUIDUserResponse(w http.ResponseWriter) error
}

type PostFederationUUIDUser200JSONResponse UUIDResponse

func (response PostFederationUUIDUser200JSONResponse) VisitPostFederationUUIDUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFederationUUIDUserUserUUIDRequestObject struct {
	UUID     Uuid     `json:"UUID"`
	UserUUID UserUUID `json:"userUUID"`
}

type DeleteFederationUUIDUserUserUUIDResponseObject interface {
	VisitDeleteFederationUUIDUserUserUUIDResponse(w http.ResponseWriter) error
}

type DeleteFederationUUIDUserUserUUID200Response struct {
}

func (response DeleteFederationUUIDUserUserUUID200Response) VisitDeleteFederationUUIDUserUserUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteGroupUUIDUserRequestObject struct {
	UUID Uuid `json:"UUID"`
	Body *DeleteGroupUUIDUserJSONRequestBody
}

type DeleteGroupUUIDUserResponseObject interface {
	VisitDeleteGroupUUIDUserResponse(w http.ResponseWriter) error
}

type DeleteGroupUUIDUser200Response struct {
}

func (response DeleteGroupUUIDUser200Response) VisitDeleteGroupUUIDUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetGroupUUIDUserRequestObject struct {
	UUID Uuid `json:"UUID"`
}

type GetGroupUUIDUserResponseObject interface {
	VisitGetGroupUUIDUserResponse(w http.ResponseWriter) error
}

type GetGroupUUIDUser200JSONResponse struct {
	Count int       `json:"count"`
	Items []UserDTO `json:"items"`
}

func (response GetGroupUUIDUser200JSONResponse) VisitGetGroupUUIDUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostGroupUUIDUserRequestObject struct {
	UUID Uuid `json:"UUID"`
	Body *PostGroupUUIDUserJSONRequestBody
}

type PostGroupUUIDUserResponseObject interface {
	VisitPostGroupUUIDUserResponse(w http.ResponseWriter) error
}

type PostGroupUUIDUser200Response struct {
}

func (response PostGroupUUIDUser200Response) VisitPostGroupUUIDUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteLegalEntitiesRequestObject struct {
	Body *DeleteLegalEntitiesJSONRequestBody
}

type DeleteLegalEntitiesResponseObject interface {
	VisitDeleteLegalEntitiesResponse(w http.ResponseWriter) error
}

type DeleteLegalEntities200JSONResponse Ans

func (response DeleteLegalEntities200JSONResponse) VisitDeleteLegalEntitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLegalEntitiesRequestObject struct {
}

type GetLegalEntitiesResponseObject interface {
	VisitGetLegalEntitiesResponse(w http.ResponseWriter) error
}

type GetLegalEntities200JSONResponse []BankAccountDTO

func (response GetLegalEntities200JSONResponse) VisitGetLegalEntitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchLegalEntitiesRequestObject struct {
	Body *PatchLegalEntitiesJSONRequestBody
}

type PatchLegalEntitiesResponseObject interface {
	VisitPatchLegalEntitiesResponse(w http.ResponseWriter) error
}

type PatchLegalEntities200JSONResponse Ans

func (response PatchLegalEntities200JSONResponse) VisitPatchLegalEntitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostLegalEntitiesRequestObject struct {
	Body *PostLegalEntitiesJSONRequestBody
}

type PostLegalEntitiesResponseObject interface {
	VisitPostLegalEntitiesResponse(w http.ResponseWriter) error
}

type PostLegalEntities201JSONResponse Ans

func (response PostLegalEntities201JSONResponse) VisitPostLegalEntitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostPermissionsRequestObject struct {
	Body *PostPermissionsJSONRequestBody
}

type PostPermissionsResponseObject interface {
	VisitPostPermissionsResponse(w http.ResponseWriter) error
}

type PostPermissions200JSONResponse struct {
	UpdatedAt time.Time          `json:"updated_at"`
	UserUuid  openapi_types.UUID `json:"user_uuid"`
}

func (response PostPermissions200JSONResponse) VisitPostPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermissionsUUIDRequestObject struct {
	UUID Uuid `json:"UUID"`
}

type DeletePermissionsUUIDResponseObject interface {
	VisitDeletePermissionsUUIDResponse(w http.ResponseWriter) error
}

type DeletePermissionsUUID200Response struct {
}

func (response DeletePermissionsUUID200Response) VisitDeletePermissionsUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetPermissionsUUIDRequestObject struct {
	UUID Uuid `json:"UUID"`
}

type GetPermissionsUUIDResponseObject interface {
	VisitGetPermissionsUUIDResponse(w http.ResponseWriter) error
}

type GetPermissionsUUID200JSONResponse struct {
	CreatedAt      time.Time          `json:"created_at"`
	FederationUuid openapi_types.UUID `json:"federation_uuid"`
	Rules          PermissionRulesDTO `json:"rules"`
	UpdatedAt      time.Time          `json:"updated_at"`
	UserUuid       openapi_types.UUID `json:"user_uuid"`
}

func (response GetPermissionsUUID200JSONResponse) VisitGetPermissionsUUIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostProfileSurveyRequestObject struct {
	Body *PostProfileSurveyJSONRequestBody
}

type PostProfileSurveyResponseObject interface {
	VisitPostProfileSurveyResponse(w http.ResponseWriter) error
}

type PostProfileSurvey200JSONResponse UUIDResponse

func (response PostProfileSurvey200JSONResponse) VisitPostProfileSurveyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProfileSurveyUUIDRequestObject struct {
	UUID Uuid `json:"UUID"`
}

type DeleteProfileSurveyUUIDResponseObject interface {
	VisitDeleteProfileSurveyUUIDResponse(w http.ResponseWriter) error
}

type DeleteProfileSurveyUUID200Response struct {
}

func (response DeleteProfileSurveyUUID200Response) VisitDeleteProfileSurveyUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetProfileSurveyUUIDRequestObject struct {
	UUID Uuid `json:"UUID"`
}

type GetProfileSurveyUUIDResponseObject interface {
	VisitGetProfileSurveyUUIDResponse(w http.ResponseWriter) error
}

type GetProfileSurveyUUID200JSONResponse SurveyDTO

func (response GetProfileSurveyUUID200JSONResponse) VisitGetProfileSurveyUUIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectRequestObject struct {
	Body *PostProjectJSONRequestBody
}

type PostProjectResponseObject interface {
	VisitPostProjectResponse(w http.ResponseWriter) error
}

type PostProject200JSONResponse UUIDResponse

func (response PostProject200JSONResponse) VisitPostProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectUUIDRequestObject struct {
	UUID Uuid `json:"UUID"`
}

type DeleteProjectUUIDResponseObject interface {
	VisitDeleteProjectUUIDResponse(w http.ResponseWriter) error
}

type DeleteProjectUUID200Response struct {
}

func (response DeleteProjectUUID200Response) VisitDeleteProjectUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetProjectUUIDRequestObject struct {
	UUID Uuid `json:"UUID"`
}

type GetProjectUUIDResponseObject interface {
	VisitGetProjectUUIDResponse(w http.ResponseWriter) error
}

type GetProjectUUID200JSONResponse ProjectDTO

func (response GetProjectUUID200JSONResponse) VisitGetProjectUUIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchProjectUUIDRequestObject struct {
	UUID Uuid `json:"UUID"`
	Body *PatchProjectUUIDJSONRequestBody
}

type PatchProjectUUIDResponseObject interface {
	VisitPatchProjectUUIDResponse(w http.ResponseWriter) error
}

type PatchProjectUUID200Response struct {
}

func (response PatchProjectUUID200Response) VisitPatchProjectUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetProjectUUIDCatalogRequestObject struct {
	UUID Uuid `json:"UUID"`
}

type GetProjectUUIDCatalogResponseObject interface {
	VisitGetProjectUUIDCatalogResponse(w http.ResponseWriter) error
}

type GetProjectUUIDCatalog200JSONResponse struct {
	Count int                     `json:"count"`
	Items []ProjectCatalogDataDTO `json:"items"`
}

func (response GetProjectUUIDCatalog200JSONResponse) VisitGetProjectUUIDCatalogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectUUIDCatalogRequestObject struct {
	UUID Uuid `json:"UUID"`
	Body *PostProjectUUIDCatalogJSONRequestBody
}

type PostProjectUUIDCatalogResponseObject interface {
	VisitPostProjectUUIDCatalogResponse(w http.ResponseWriter) error
}

type PostProjectUUIDCatalog200JSONResponse struct {
	Uuid openapi_types.UUID `json:"uuid"`
}

func (response PostProjectUUIDCatalog200JSONResponse) VisitPostProjectUUIDCatalogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectUUIDCatalogEntityNameRequestObject struct {
	UUID       Uuid       `json:"UUID"`
	EntityName EntityName `json:"entityName"`
}

type GetProjectUUIDCatalogEntityNameResponseObject interface {
	VisitGetProjectUUIDCatalogEntityNameResponse(w http.ResponseWriter) error
}

type GetProjectUUIDCatalogEntityName200JSONResponse struct {
	Count int                     `json:"count"`
	Items []ProjectCatalogDataDTO `json:"items"`
}

func (response GetProjectUUIDCatalogEntityName200JSONResponse) VisitGetProjectUUIDCatalogEntityNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectUUIDCatalogEntityUUIDRequestObject struct {
	UUID       Uuid       `json:"UUID"`
	EntityUUID EntityUUID `json:"entityUUID"`
}

type DeleteProjectUUIDCatalogEntityUUIDResponseObject interface {
	VisitDeleteProjectUUIDCatalogEntityUUIDResponse(w http.ResponseWriter) error
}

type DeleteProjectUUIDCatalogEntityUUID200Response struct {
}

func (response DeleteProjectUUIDCatalogEntityUUID200Response) VisitDeleteProjectUUIDCatalogEntityUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PatchProjectUUIDDescriptionRequestObject struct {
	UUID Uuid `json:"UUID"`
	Body *PatchProjectUUIDDescriptionJSONRequestBody
}

type PatchProjectUUIDDescriptionResponseObject interface {
	VisitPatchProjectUUIDDescriptionResponse(w http.ResponseWriter) error
}

type PatchProjectUUIDDescription200Response struct {
}

func (response PatchProjectUUIDDescription200Response) VisitPatchProjectUUIDDescriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteProjectUUIDFieldEntityUUIDRequestObject struct {
	UUID       Uuid       `json:"UUID"`
	EntityUUID EntityUUID `json:"entityUUID"`
}

type DeleteProjectUUIDFieldEntityUUIDResponseObject interface {
	VisitDeleteProjectUUIDFieldEntityUUIDResponse(w http.ResponseWriter) error
}

type DeleteProjectUUIDFieldEntityUUID200Response struct {
}

func (response DeleteProjectUUIDFieldEntityUUID200Response) VisitDeleteProjectUUIDFieldEntityUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostProjectUUIDFieldEntityUUIDRequestObject struct {
	UUID       Uuid       `json:"UUID"`
	EntityUUID EntityUUID `json:"entityUUID"`
	Body       *PostProjectUUIDFieldEntityUUIDJSONRequestBody
}

type PostProjectUUIDFieldEntityUUIDResponseObject interface {
	VisitPostProjectUUIDFieldEntityUUIDResponse(w http.ResponseWriter) error
}

type PostProjectUUIDFieldEntityUUID200Response struct {
}

func (response PostProjectUUIDFieldEntityUUID200Response) VisitPostProjectUUIDFieldEntityUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PatchProjectUUIDGraphRequestObject struct {
	UUID Uuid `json:"UUID"`
	Body *PatchProjectUUIDGraphJSONRequestBody
}

type PatchProjectUUIDGraphResponseObject interface {
	VisitPatchProjectUUIDGraphResponse(w http.ResponseWriter) error
}

type PatchProjectUUIDGraph200JSONResponse map[string]interface{}

func (response PatchProjectUUIDGraph200JSONResponse) VisitPatchProjectUUIDGraphResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchProjectUUIDNameRequestObject struct {
	UUID Uuid `json:"UUID"`
	Body *PatchProjectUUIDNameJSONRequestBody
}

type PatchProjectUUIDNameResponseObject interface {
	VisitPatchProjectUUIDNameResponse(w http.ResponseWriter) error
}

type PatchProjectUUIDName200Response struct {
}

func (response PatchProjectUUIDName200Response) VisitPatchProjectUUIDNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PatchProjectUUIDOptionsRequestObject struct {
	UUID Uuid `json:"UUID"`
	Body *PatchProjectUUIDOptionsJSONRequestBody
}

type PatchProjectUUIDOptionsResponseObject interface {
	VisitPatchProjectUUIDOptionsResponse(w http.ResponseWriter) error
}

type PatchProjectUUIDOptions200Response struct {
}

func (response PatchProjectUUIDOptions200Response) VisitPatchProjectUUIDOptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetProjectUUIDStatusRequestObject struct {
	UUID Uuid `json:"UUID"`
}

type GetProjectUUIDStatusResponseObject interface {
	VisitGetProjectUUIDStatusResponse(w http.ResponseWriter) error
}

type GetProjectUUIDStatus200JSONResponse struct {
	Count int                `json:"count"`
	Items []ProjectStatusDTO `json:"items"`
}

func (response GetProjectUUIDStatus200JSONResponse) VisitGetProjectUUIDStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectUUIDStatusRequestObject struct {
	UUID Uuid `json:"UUID"`
	Body *PostProjectUUIDStatusJSONRequestBody
}

type PostProjectUUIDStatusResponseObject interface {
	VisitPostProjectUUIDStatusResponse(w http.ResponseWriter) error
}

type PostProjectUUIDStatus200JSONResponse UUIDResponse

func (response PostProjectUUIDStatus200JSONResponse) VisitPostProjectUUIDStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectUUIDStatusEntityUUIDRequestObject struct {
	UUID       Uuid       `json:"UUID"`
	EntityUUID EntityUUID `json:"entityUUID"`
}

type DeleteProjectUUIDStatusEntityUUIDResponseObject interface {
	VisitDeleteProjectUUIDStatusEntityUUIDResponse(w http.ResponseWriter) error
}

type DeleteProjectUUIDStatusEntityUUID200Response struct {
}

func (response DeleteProjectUUIDStatusEntityUUID200Response) VisitDeleteProjectUUIDStatusEntityUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PatchProjectUUIDStatusEntityUUIDRequestObject struct {
	UUID       Uuid       `json:"UUID"`
	EntityUUID EntityUUID `json:"entityUUID"`
	Body       *PatchProjectUUIDStatusEntityUUIDJSONRequestBody
}

type PatchProjectUUIDStatusEntityUUIDResponseObject interface {
	VisitPatchProjectUUIDStatusEntityUUIDResponse(w http.ResponseWriter) error
}

type PatchProjectUUIDStatusEntityUUID200Response struct {
}

func (response PatchProjectUUIDStatusEntityUUID200Response) VisitPatchProjectUUIDStatusEntityUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostProjectUUIDUserRequestObject struct {
	UUID Uuid `json:"UUID"`
	Body *PostProjectUUIDUserJSONRequestBody
}

type PostProjectUUIDUserResponseObject interface {
	VisitPostProjectUUIDUserResponse(w http.ResponseWriter) error
}

type PostProjectUUIDUser200JSONResponse UUIDResponse

func (response PostProjectUUIDUser200JSONResponse) VisitPostProjectUUIDUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectUUIDUserUserUUIDRequestObject struct {
	UUID     Uuid     `json:"UUID"`
	UserUUID UserUUID `json:"userUUID"`
}

type DeleteProjectUUIDUserUserUUIDResponseObject interface {
	VisitDeleteProjectUUIDUserUserUUIDResponse(w http.ResponseWriter) error
}

type DeleteProjectUUIDUserUserUUID200Response struct {
}

func (response DeleteProjectUUIDUserUserUUID200Response) VisitDeleteProjectUUIDUserUserUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetTagRequestObject struct {
	Params GetTagParams
}

type GetTagResponseObject interface {
	VisitGetTagResponse(w http.ResponseWriter) error
}

type GetTag200JSONResponse struct {
	Count int      `json:"count"`
	Items []TagDTO `json:"items"`
}

func (response GetTag200JSONResponse) VisitGetTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTagRequestObject struct {
	Body *PostTagJSONRequestBody
}

type PostTagResponseObject interface {
	VisitPostTagResponse(w http.ResponseWriter) error
}

type PostTag200JSONResponse UUIDResponse

func (response PostTag200JSONResponse) VisitPostTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTagUUIDRequestObject struct {
	UUID Uuid `json:"UUID"`
}

type DeleteTagUUIDResponseObject interface {
	VisitDeleteTagUUIDResponse(w http.ResponseWriter) error
}

type DeleteTagUUID200Response struct {
}

func (response DeleteTagUUID200Response) VisitDeleteTagUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PatchTagUUIDRequestObject struct {
	UUID Uuid `json:"UUID"`
	Body *PatchTagUUIDJSONRequestBody
}

type PatchTagUUIDResponseObject interface {
	VisitPatchTagUUIDResponse(w http.ResponseWriter) error
}

type PatchTagUUID200Response struct {
}

func (response PatchTagUUID200Response) VisitPatchTagUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetUserRequestObject struct {
	Body *GetUserJSONRequestBody
}

type GetUserResponseObject interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200JSONResponse struct {
	Count int       `json:"count"`
	Items []UserDTO `json:"items"`
}

func (response GetUser200JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /company)
	PostCompany(ctx context.Context, request PostCompanyRequestObject) (PostCompanyResponseObject, error)

	// (DELETE /company/{UUID})
	DeleteCompanyUUID(ctx context.Context, request DeleteCompanyUUIDRequestObject) (DeleteCompanyUUIDResponseObject, error)

	// (GET /company/{UUID})
	GetCompanyUUID(ctx context.Context, request GetCompanyUUIDRequestObject) (GetCompanyUUIDResponseObject, error)

	// (GET /company/{UUID}/fields)
	GetCompanyUUIDFields(ctx context.Context, request GetCompanyUUIDFieldsRequestObject) (GetCompanyUUIDFieldsResponseObject, error)

	// (POST /company/{UUID}/fields)
	PostCompanyUUIDFields(ctx context.Context, request PostCompanyUUIDFieldsRequestObject) (PostCompanyUUIDFieldsResponseObject, error)

	// (DELETE /company/{UUID}/fields/{entityUUID})
	DeleteCompanyUUIDFieldsEntityUUID(ctx context.Context, request DeleteCompanyUUIDFieldsEntityUUIDRequestObject) (DeleteCompanyUUIDFieldsEntityUUIDResponseObject, error)

	// (PUT /company/{UUID}/fields/{entityUUID})
	PutCompanyUUIDFieldsEntityUUID(ctx context.Context, request PutCompanyUUIDFieldsEntityUUIDRequestObject) (PutCompanyUUIDFieldsEntityUUIDResponseObject, error)

	// (GET /company/{UUID}/group)
	GetCompanyUUIDGroup(ctx context.Context, request GetCompanyUUIDGroupRequestObject) (GetCompanyUUIDGroupResponseObject, error)

	// (POST /company/{UUID}/group)
	PostCompanyUUIDGroup(ctx context.Context, request PostCompanyUUIDGroupRequestObject) (PostCompanyUUIDGroupResponseObject, error)

	// (DELETE /company/{UUID}/group/{entityUUID})
	DeleteCompanyUUIDGroupEntityUUID(ctx context.Context, request DeleteCompanyUUIDGroupEntityUUIDRequestObject) (DeleteCompanyUUIDGroupEntityUUIDResponseObject, error)

	// (PATCH /company/{UUID}/group/{entityUUID})
	PatchCompanyUUIDGroupEntityUUID(ctx context.Context, request PatchCompanyUUIDGroupEntityUUIDRequestObject) (PatchCompanyUUIDGroupEntityUUIDResponseObject, error)

	// (PATCH /company/{UUID}/name)
	PatchCompanyUUIDName(ctx context.Context, request PatchCompanyUUIDNameRequestObject) (PatchCompanyUUIDNameResponseObject, error)

	// (GET /company/{UUID}/priorities)
	GetCompanyUUIDPriorities(ctx context.Context, request GetCompanyUUIDPrioritiesRequestObject) (GetCompanyUUIDPrioritiesResponseObject, error)

	// (POST /company/{UUID}/priorities)
	PostCompanyUUIDPriorities(ctx context.Context, request PostCompanyUUIDPrioritiesRequestObject) (PostCompanyUUIDPrioritiesResponseObject, error)

	// (DELETE /company/{UUID}/priorities/{entityUUID})
	DeleteCompanyUUIDPrioritiesEntityUUID(ctx context.Context, request DeleteCompanyUUIDPrioritiesEntityUUIDRequestObject) (DeleteCompanyUUIDPrioritiesEntityUUIDResponseObject, error)

	// (PATCH /company/{UUID}/priorities/{entityUUID})
	PatchCompanyUUIDPrioritiesEntityUUID(ctx context.Context, request PatchCompanyUUIDPrioritiesEntityUUIDRequestObject) (PatchCompanyUUIDPrioritiesEntityUUIDResponseObject, error)

	// (GET /company/{UUID}/project/catalog/{entityName})
	GetCompanyUUIDProjectCatalogEntityName(ctx context.Context, request GetCompanyUUIDProjectCatalogEntityNameRequestObject) (GetCompanyUUIDProjectCatalogEntityNameResponseObject, error)

	// (GET /company/{UUID}/sms)
	GetCompanyUUIDSms(ctx context.Context, request GetCompanyUUIDSmsRequestObject) (GetCompanyUUIDSmsResponseObject, error)

	// (POST /company/{UUID}/sms/cost)
	PostCompanyUUIDSmsCost(ctx context.Context, request PostCompanyUUIDSmsCostRequestObject) (PostCompanyUUIDSmsCostResponseObject, error)

	// (POST /company/{UUID}/sms/options)
	PostCompanyUUIDSmsOptions(ctx context.Context, request PostCompanyUUIDSmsOptionsRequestObject) (PostCompanyUUIDSmsOptionsResponseObject, error)

	// (POST /company/{UUID}/sms/send)
	PostCompanyUUIDSmsSend(ctx context.Context, request PostCompanyUUIDSmsSendRequestObject) (PostCompanyUUIDSmsSendResponseObject, error)

	// (POST /company/{UUID}/user)
	PostCompanyUUIDUser(ctx context.Context, request PostCompanyUUIDUserRequestObject) (PostCompanyUUIDUserResponseObject, error)

	// (DELETE /company/{UUID}/user/{userUUID})
	DeleteCompanyUUIDUserUserUUID(ctx context.Context, request DeleteCompanyUUIDUserUserUUIDRequestObject) (DeleteCompanyUUIDUserUserUUIDResponseObject, error)

	// (POST /federation)
	PostFederation(ctx context.Context, request PostFederationRequestObject) (PostFederationResponseObject, error)

	// (DELETE /federation/{UUID})
	DeleteFederationUUID(ctx context.Context, request DeleteFederationUUIDRequestObject) (DeleteFederationUUIDResponseObject, error)

	// (GET /federation/{UUID})
	GetFederationUUID(ctx context.Context, request GetFederationUUIDRequestObject) (GetFederationUUIDResponseObject, error)

	// (GET /federation/{UUID}/agent)
	GetFederationUUIDAgent(ctx context.Context, request GetFederationUUIDAgentRequestObject) (GetFederationUUIDAgentResponseObject, error)

	// (POST /federation/{UUID}/agent)
	PostFederationUUIDAgent(ctx context.Context, request PostFederationUUIDAgentRequestObject) (PostFederationUUIDAgentResponseObject, error)

	// (DELETE /federation/{UUID}/agent/{entityUUID})
	DeleteFederationUUIDAgentEntityUUID(ctx context.Context, request DeleteFederationUUIDAgentEntityUUIDRequestObject) (DeleteFederationUUIDAgentEntityUUIDResponseObject, error)

	// (PATCH /federation/{UUID}/agent/{entityUUID})
	PatchFederationUUIDAgentEntityUUID(ctx context.Context, request PatchFederationUUIDAgentEntityUUIDRequestObject) (PatchFederationUUIDAgentEntityUUIDResponseObject, error)

	// (GET /federation/{UUID}/invite)
	GetFederationUUIDInvite(ctx context.Context, request GetFederationUUIDInviteRequestObject) (GetFederationUUIDInviteResponseObject, error)

	// (POST /federation/{UUID}/invite)
	PostFederationUUIDInvite(ctx context.Context, request PostFederationUUIDInviteRequestObject) (PostFederationUUIDInviteResponseObject, error)

	// (DELETE /federation/{UUID}/invite/{entityUUID})
	DeleteFederationUUIDInviteEntityUUID(ctx context.Context, request DeleteFederationUUIDInviteEntityUUIDRequestObject) (DeleteFederationUUIDInviteEntityUUIDResponseObject, error)

	// (PATCH /federation/{UUID}/name)
	PatchFederationUUIDName(ctx context.Context, request PatchFederationUUIDNameRequestObject) (PatchFederationUUIDNameResponseObject, error)

	// (GET /federation/{UUID}/project)
	GetFederationUUIDProject(ctx context.Context, request GetFederationUUIDProjectRequestObject) (GetFederationUUIDProjectResponseObject, error)

	// (POST /federation/{UUID}/user)
	PostFederationUUIDUser(ctx context.Context, request PostFederationUUIDUserRequestObject) (PostFederationUUIDUserResponseObject, error)

	// (DELETE /federation/{UUID}/user/{userUUID})
	DeleteFederationUUIDUserUserUUID(ctx context.Context, request DeleteFederationUUIDUserUserUUIDRequestObject) (DeleteFederationUUIDUserUserUUIDResponseObject, error)

	// (DELETE /group/{UUID}/user)
	DeleteGroupUUIDUser(ctx context.Context, request DeleteGroupUUIDUserRequestObject) (DeleteGroupUUIDUserResponseObject, error)

	// (GET /group/{UUID}/user)
	GetGroupUUIDUser(ctx context.Context, request GetGroupUUIDUserRequestObject) (GetGroupUUIDUserResponseObject, error)

	// (POST /group/{UUID}/user)
	PostGroupUUIDUser(ctx context.Context, request PostGroupUUIDUserRequestObject) (PostGroupUUIDUserResponseObject, error)
	// Delete user by id
	// (DELETE /legal_entities)
	DeleteLegalEntities(ctx context.Context, request DeleteLegalEntitiesRequestObject) (DeleteLegalEntitiesResponseObject, error)
	// Get All Bank Accounts
	// (GET /legal_entities)
	GetLegalEntities(ctx context.Context, request GetLegalEntitiesRequestObject) (GetLegalEntitiesResponseObject, error)
	// Change users data
	// (PATCH /legal_entities)
	PatchLegalEntities(ctx context.Context, request PatchLegalEntitiesRequestObject) (PatchLegalEntitiesResponseObject, error)
	// Create new Bank Account
	// (POST /legal_entities)
	PostLegalEntities(ctx context.Context, request PostLegalEntitiesRequestObject) (PostLegalEntitiesResponseObject, error)

	// (POST /permissions)
	PostPermissions(ctx context.Context, request PostPermissionsRequestObject) (PostPermissionsResponseObject, error)

	// (DELETE /permissions/{UUID})
	DeletePermissionsUUID(ctx context.Context, request DeletePermissionsUUIDRequestObject) (DeletePermissionsUUIDResponseObject, error)

	// (GET /permissions/{UUID})
	GetPermissionsUUID(ctx context.Context, request GetPermissionsUUIDRequestObject) (GetPermissionsUUIDResponseObject, error)

	// (POST /profile/survey)
	PostProfileSurvey(ctx context.Context, request PostProfileSurveyRequestObject) (PostProfileSurveyResponseObject, error)

	// (DELETE /profile/survey/{UUID})
	DeleteProfileSurveyUUID(ctx context.Context, request DeleteProfileSurveyUUIDRequestObject) (DeleteProfileSurveyUUIDResponseObject, error)

	// (GET /profile/survey/{UUID})
	GetProfileSurveyUUID(ctx context.Context, request GetProfileSurveyUUIDRequestObject) (GetProfileSurveyUUIDResponseObject, error)

	// (POST /project)
	PostProject(ctx context.Context, request PostProjectRequestObject) (PostProjectResponseObject, error)

	// (DELETE /project/{UUID})
	DeleteProjectUUID(ctx context.Context, request DeleteProjectUUIDRequestObject) (DeleteProjectUUIDResponseObject, error)

	// (GET /project/{UUID})
	GetProjectUUID(ctx context.Context, request GetProjectUUIDRequestObject) (GetProjectUUIDResponseObject, error)

	// (PATCH /project/{UUID})
	PatchProjectUUID(ctx context.Context, request PatchProjectUUIDRequestObject) (PatchProjectUUIDResponseObject, error)

	// (GET /project/{UUID}/catalog)
	GetProjectUUIDCatalog(ctx context.Context, request GetProjectUUIDCatalogRequestObject) (GetProjectUUIDCatalogResponseObject, error)

	// (POST /project/{UUID}/catalog)
	PostProjectUUIDCatalog(ctx context.Context, request PostProjectUUIDCatalogRequestObject) (PostProjectUUIDCatalogResponseObject, error)

	// (GET /project/{UUID}/catalog/{entityName})
	GetProjectUUIDCatalogEntityName(ctx context.Context, request GetProjectUUIDCatalogEntityNameRequestObject) (GetProjectUUIDCatalogEntityNameResponseObject, error)

	// (DELETE /project/{UUID}/catalog/{entityUUID})
	DeleteProjectUUIDCatalogEntityUUID(ctx context.Context, request DeleteProjectUUIDCatalogEntityUUIDRequestObject) (DeleteProjectUUIDCatalogEntityUUIDResponseObject, error)

	// (PATCH /project/{UUID}/description)
	PatchProjectUUIDDescription(ctx context.Context, request PatchProjectUUIDDescriptionRequestObject) (PatchProjectUUIDDescriptionResponseObject, error)

	// (DELETE /project/{UUID}/field/{entityUUID})
	DeleteProjectUUIDFieldEntityUUID(ctx context.Context, request DeleteProjectUUIDFieldEntityUUIDRequestObject) (DeleteProjectUUIDFieldEntityUUIDResponseObject, error)

	// (POST /project/{UUID}/field/{entityUUID})
	PostProjectUUIDFieldEntityUUID(ctx context.Context, request PostProjectUUIDFieldEntityUUIDRequestObject) (PostProjectUUIDFieldEntityUUIDResponseObject, error)

	// (PATCH /project/{UUID}/graph)
	PatchProjectUUIDGraph(ctx context.Context, request PatchProjectUUIDGraphRequestObject) (PatchProjectUUIDGraphResponseObject, error)

	// (PATCH /project/{UUID}/name)
	PatchProjectUUIDName(ctx context.Context, request PatchProjectUUIDNameRequestObject) (PatchProjectUUIDNameResponseObject, error)

	// (PATCH /project/{UUID}/options)
	PatchProjectUUIDOptions(ctx context.Context, request PatchProjectUUIDOptionsRequestObject) (PatchProjectUUIDOptionsResponseObject, error)

	// (GET /project/{UUID}/status)
	GetProjectUUIDStatus(ctx context.Context, request GetProjectUUIDStatusRequestObject) (GetProjectUUIDStatusResponseObject, error)

	// (POST /project/{UUID}/status)
	PostProjectUUIDStatus(ctx context.Context, request PostProjectUUIDStatusRequestObject) (PostProjectUUIDStatusResponseObject, error)

	// (DELETE /project/{UUID}/status/{entityUUID})
	DeleteProjectUUIDStatusEntityUUID(ctx context.Context, request DeleteProjectUUIDStatusEntityUUIDRequestObject) (DeleteProjectUUIDStatusEntityUUIDResponseObject, error)

	// (PATCH /project/{UUID}/status/{entityUUID})
	PatchProjectUUIDStatusEntityUUID(ctx context.Context, request PatchProjectUUIDStatusEntityUUIDRequestObject) (PatchProjectUUIDStatusEntityUUIDResponseObject, error)

	// (POST /project/{UUID}/user)
	PostProjectUUIDUser(ctx context.Context, request PostProjectUUIDUserRequestObject) (PostProjectUUIDUserResponseObject, error)

	// (DELETE /project/{UUID}/user/{userUUID})
	DeleteProjectUUIDUserUserUUID(ctx context.Context, request DeleteProjectUUIDUserUserUUIDRequestObject) (DeleteProjectUUIDUserUserUUIDResponseObject, error)

	// (GET /tag)
	GetTag(ctx context.Context, request GetTagRequestObject) (GetTagResponseObject, error)

	// (POST /tag)
	PostTag(ctx context.Context, request PostTagRequestObject) (PostTagResponseObject, error)

	// (DELETE /tag/{UUID})
	DeleteTagUUID(ctx context.Context, request DeleteTagUUIDRequestObject) (DeleteTagUUIDResponseObject, error)

	// (PATCH /tag/{UUID})
	PatchTagUUID(ctx context.Context, request PatchTagUUIDRequestObject) (PatchTagUUIDResponseObject, error)

	// (GET /user)
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostCompany operation middleware
func (sh *strictHandler) PostCompany(ctx echo.Context) error {
	var request PostCompanyRequestObject

	var body PostCompanyJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCompany(ctx.Request().Context(), request.(PostCompanyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCompany")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostCompanyResponseObject); ok {
		return validResponse.VisitPostCompanyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteCompanyUUID operation middleware
func (sh *strictHandler) DeleteCompanyUUID(ctx echo.Context, uUID Uuid) error {
	var request DeleteCompanyUUIDRequestObject

	request.UUID = uUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCompanyUUID(ctx.Request().Context(), request.(DeleteCompanyUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCompanyUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteCompanyUUIDResponseObject); ok {
		return validResponse.VisitDeleteCompanyUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCompanyUUID operation middleware
func (sh *strictHandler) GetCompanyUUID(ctx echo.Context, uUID Uuid) error {
	var request GetCompanyUUIDRequestObject

	request.UUID = uUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCompanyUUID(ctx.Request().Context(), request.(GetCompanyUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCompanyUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCompanyUUIDResponseObject); ok {
		return validResponse.VisitGetCompanyUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCompanyUUIDFields operation middleware
func (sh *strictHandler) GetCompanyUUIDFields(ctx echo.Context, uUID Uuid) error {
	var request GetCompanyUUIDFieldsRequestObject

	request.UUID = uUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCompanyUUIDFields(ctx.Request().Context(), request.(GetCompanyUUIDFieldsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCompanyUUIDFields")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCompanyUUIDFieldsResponseObject); ok {
		return validResponse.VisitGetCompanyUUIDFieldsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostCompanyUUIDFields operation middleware
func (sh *strictHandler) PostCompanyUUIDFields(ctx echo.Context, uUID Uuid) error {
	var request PostCompanyUUIDFieldsRequestObject

	request.UUID = uUID

	var body PostCompanyUUIDFieldsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCompanyUUIDFields(ctx.Request().Context(), request.(PostCompanyUUIDFieldsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCompanyUUIDFields")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostCompanyUUIDFieldsResponseObject); ok {
		return validResponse.VisitPostCompanyUUIDFieldsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteCompanyUUIDFieldsEntityUUID operation middleware
func (sh *strictHandler) DeleteCompanyUUIDFieldsEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error {
	var request DeleteCompanyUUIDFieldsEntityUUIDRequestObject

	request.UUID = uUID
	request.EntityUUID = entityUUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCompanyUUIDFieldsEntityUUID(ctx.Request().Context(), request.(DeleteCompanyUUIDFieldsEntityUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCompanyUUIDFieldsEntityUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteCompanyUUIDFieldsEntityUUIDResponseObject); ok {
		return validResponse.VisitDeleteCompanyUUIDFieldsEntityUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutCompanyUUIDFieldsEntityUUID operation middleware
func (sh *strictHandler) PutCompanyUUIDFieldsEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error {
	var request PutCompanyUUIDFieldsEntityUUIDRequestObject

	request.UUID = uUID
	request.EntityUUID = entityUUID

	var body PutCompanyUUIDFieldsEntityUUIDJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutCompanyUUIDFieldsEntityUUID(ctx.Request().Context(), request.(PutCompanyUUIDFieldsEntityUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutCompanyUUIDFieldsEntityUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutCompanyUUIDFieldsEntityUUIDResponseObject); ok {
		return validResponse.VisitPutCompanyUUIDFieldsEntityUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCompanyUUIDGroup operation middleware
func (sh *strictHandler) GetCompanyUUIDGroup(ctx echo.Context, uUID Uuid) error {
	var request GetCompanyUUIDGroupRequestObject

	request.UUID = uUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCompanyUUIDGroup(ctx.Request().Context(), request.(GetCompanyUUIDGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCompanyUUIDGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCompanyUUIDGroupResponseObject); ok {
		return validResponse.VisitGetCompanyUUIDGroupResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostCompanyUUIDGroup operation middleware
func (sh *strictHandler) PostCompanyUUIDGroup(ctx echo.Context, uUID Uuid) error {
	var request PostCompanyUUIDGroupRequestObject

	request.UUID = uUID

	var body PostCompanyUUIDGroupJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCompanyUUIDGroup(ctx.Request().Context(), request.(PostCompanyUUIDGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCompanyUUIDGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostCompanyUUIDGroupResponseObject); ok {
		return validResponse.VisitPostCompanyUUIDGroupResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteCompanyUUIDGroupEntityUUID operation middleware
func (sh *strictHandler) DeleteCompanyUUIDGroupEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error {
	var request DeleteCompanyUUIDGroupEntityUUIDRequestObject

	request.UUID = uUID
	request.EntityUUID = entityUUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCompanyUUIDGroupEntityUUID(ctx.Request().Context(), request.(DeleteCompanyUUIDGroupEntityUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCompanyUUIDGroupEntityUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteCompanyUUIDGroupEntityUUIDResponseObject); ok {
		return validResponse.VisitDeleteCompanyUUIDGroupEntityUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchCompanyUUIDGroupEntityUUID operation middleware
func (sh *strictHandler) PatchCompanyUUIDGroupEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error {
	var request PatchCompanyUUIDGroupEntityUUIDRequestObject

	request.UUID = uUID
	request.EntityUUID = entityUUID

	var body PatchCompanyUUIDGroupEntityUUIDJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchCompanyUUIDGroupEntityUUID(ctx.Request().Context(), request.(PatchCompanyUUIDGroupEntityUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchCompanyUUIDGroupEntityUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchCompanyUUIDGroupEntityUUIDResponseObject); ok {
		return validResponse.VisitPatchCompanyUUIDGroupEntityUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchCompanyUUIDName operation middleware
func (sh *strictHandler) PatchCompanyUUIDName(ctx echo.Context, uUID Uuid) error {
	var request PatchCompanyUUIDNameRequestObject

	request.UUID = uUID

	var body PatchCompanyUUIDNameJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchCompanyUUIDName(ctx.Request().Context(), request.(PatchCompanyUUIDNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchCompanyUUIDName")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchCompanyUUIDNameResponseObject); ok {
		return validResponse.VisitPatchCompanyUUIDNameResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCompanyUUIDPriorities operation middleware
func (sh *strictHandler) GetCompanyUUIDPriorities(ctx echo.Context, uUID Uuid) error {
	var request GetCompanyUUIDPrioritiesRequestObject

	request.UUID = uUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCompanyUUIDPriorities(ctx.Request().Context(), request.(GetCompanyUUIDPrioritiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCompanyUUIDPriorities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCompanyUUIDPrioritiesResponseObject); ok {
		return validResponse.VisitGetCompanyUUIDPrioritiesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostCompanyUUIDPriorities operation middleware
func (sh *strictHandler) PostCompanyUUIDPriorities(ctx echo.Context, uUID Uuid) error {
	var request PostCompanyUUIDPrioritiesRequestObject

	request.UUID = uUID

	var body PostCompanyUUIDPrioritiesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCompanyUUIDPriorities(ctx.Request().Context(), request.(PostCompanyUUIDPrioritiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCompanyUUIDPriorities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostCompanyUUIDPrioritiesResponseObject); ok {
		return validResponse.VisitPostCompanyUUIDPrioritiesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteCompanyUUIDPrioritiesEntityUUID operation middleware
func (sh *strictHandler) DeleteCompanyUUIDPrioritiesEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error {
	var request DeleteCompanyUUIDPrioritiesEntityUUIDRequestObject

	request.UUID = uUID
	request.EntityUUID = entityUUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCompanyUUIDPrioritiesEntityUUID(ctx.Request().Context(), request.(DeleteCompanyUUIDPrioritiesEntityUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCompanyUUIDPrioritiesEntityUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteCompanyUUIDPrioritiesEntityUUIDResponseObject); ok {
		return validResponse.VisitDeleteCompanyUUIDPrioritiesEntityUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchCompanyUUIDPrioritiesEntityUUID operation middleware
func (sh *strictHandler) PatchCompanyUUIDPrioritiesEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error {
	var request PatchCompanyUUIDPrioritiesEntityUUIDRequestObject

	request.UUID = uUID
	request.EntityUUID = entityUUID

	var body PatchCompanyUUIDPrioritiesEntityUUIDJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchCompanyUUIDPrioritiesEntityUUID(ctx.Request().Context(), request.(PatchCompanyUUIDPrioritiesEntityUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchCompanyUUIDPrioritiesEntityUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchCompanyUUIDPrioritiesEntityUUIDResponseObject); ok {
		return validResponse.VisitPatchCompanyUUIDPrioritiesEntityUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCompanyUUIDProjectCatalogEntityName operation middleware
func (sh *strictHandler) GetCompanyUUIDProjectCatalogEntityName(ctx echo.Context, uUID Uuid, entityName EntityName) error {
	var request GetCompanyUUIDProjectCatalogEntityNameRequestObject

	request.UUID = uUID
	request.EntityName = entityName

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCompanyUUIDProjectCatalogEntityName(ctx.Request().Context(), request.(GetCompanyUUIDProjectCatalogEntityNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCompanyUUIDProjectCatalogEntityName")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCompanyUUIDProjectCatalogEntityNameResponseObject); ok {
		return validResponse.VisitGetCompanyUUIDProjectCatalogEntityNameResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCompanyUUIDSms operation middleware
func (sh *strictHandler) GetCompanyUUIDSms(ctx echo.Context, uUID Uuid, params GetCompanyUUIDSmsParams) error {
	var request GetCompanyUUIDSmsRequestObject

	request.UUID = uUID
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCompanyUUIDSms(ctx.Request().Context(), request.(GetCompanyUUIDSmsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCompanyUUIDSms")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCompanyUUIDSmsResponseObject); ok {
		return validResponse.VisitGetCompanyUUIDSmsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostCompanyUUIDSmsCost operation middleware
func (sh *strictHandler) PostCompanyUUIDSmsCost(ctx echo.Context, uUID Uuid) error {
	var request PostCompanyUUIDSmsCostRequestObject

	request.UUID = uUID

	var body PostCompanyUUIDSmsCostJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCompanyUUIDSmsCost(ctx.Request().Context(), request.(PostCompanyUUIDSmsCostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCompanyUUIDSmsCost")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostCompanyUUIDSmsCostResponseObject); ok {
		return validResponse.VisitPostCompanyUUIDSmsCostResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostCompanyUUIDSmsOptions operation middleware
func (sh *strictHandler) PostCompanyUUIDSmsOptions(ctx echo.Context, uUID Uuid) error {
	var request PostCompanyUUIDSmsOptionsRequestObject

	request.UUID = uUID

	var body PostCompanyUUIDSmsOptionsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCompanyUUIDSmsOptions(ctx.Request().Context(), request.(PostCompanyUUIDSmsOptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCompanyUUIDSmsOptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostCompanyUUIDSmsOptionsResponseObject); ok {
		return validResponse.VisitPostCompanyUUIDSmsOptionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostCompanyUUIDSmsSend operation middleware
func (sh *strictHandler) PostCompanyUUIDSmsSend(ctx echo.Context, uUID Uuid, params PostCompanyUUIDSmsSendParams) error {
	var request PostCompanyUUIDSmsSendRequestObject

	request.UUID = uUID
	request.Params = params

	var body PostCompanyUUIDSmsSendJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCompanyUUIDSmsSend(ctx.Request().Context(), request.(PostCompanyUUIDSmsSendRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCompanyUUIDSmsSend")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostCompanyUUIDSmsSendResponseObject); ok {
		return validResponse.VisitPostCompanyUUIDSmsSendResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostCompanyUUIDUser operation middleware
func (sh *strictHandler) PostCompanyUUIDUser(ctx echo.Context, uUID Uuid) error {
	var request PostCompanyUUIDUserRequestObject

	request.UUID = uUID

	var body PostCompanyUUIDUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCompanyUUIDUser(ctx.Request().Context(), request.(PostCompanyUUIDUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCompanyUUIDUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostCompanyUUIDUserResponseObject); ok {
		return validResponse.VisitPostCompanyUUIDUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteCompanyUUIDUserUserUUID operation middleware
func (sh *strictHandler) DeleteCompanyUUIDUserUserUUID(ctx echo.Context, uUID Uuid, userUUID UserUUID) error {
	var request DeleteCompanyUUIDUserUserUUIDRequestObject

	request.UUID = uUID
	request.UserUUID = userUUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCompanyUUIDUserUserUUID(ctx.Request().Context(), request.(DeleteCompanyUUIDUserUserUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCompanyUUIDUserUserUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteCompanyUUIDUserUserUUIDResponseObject); ok {
		return validResponse.VisitDeleteCompanyUUIDUserUserUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostFederation operation middleware
func (sh *strictHandler) PostFederation(ctx echo.Context) error {
	var request PostFederationRequestObject

	var body PostFederationJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostFederation(ctx.Request().Context(), request.(PostFederationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostFederation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostFederationResponseObject); ok {
		return validResponse.VisitPostFederationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteFederationUUID operation middleware
func (sh *strictHandler) DeleteFederationUUID(ctx echo.Context, uUID Uuid) error {
	var request DeleteFederationUUIDRequestObject

	request.UUID = uUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFederationUUID(ctx.Request().Context(), request.(DeleteFederationUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFederationUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteFederationUUIDResponseObject); ok {
		return validResponse.VisitDeleteFederationUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetFederationUUID operation middleware
func (sh *strictHandler) GetFederationUUID(ctx echo.Context, uUID Uuid) error {
	var request GetFederationUUIDRequestObject

	request.UUID = uUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetFederationUUID(ctx.Request().Context(), request.(GetFederationUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFederationUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetFederationUUIDResponseObject); ok {
		return validResponse.VisitGetFederationUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetFederationUUIDAgent operation middleware
func (sh *strictHandler) GetFederationUUIDAgent(ctx echo.Context, uUID Uuid, params GetFederationUUIDAgentParams) error {
	var request GetFederationUUIDAgentRequestObject

	request.UUID = uUID
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetFederationUUIDAgent(ctx.Request().Context(), request.(GetFederationUUIDAgentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFederationUUIDAgent")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetFederationUUIDAgentResponseObject); ok {
		return validResponse.VisitGetFederationUUIDAgentResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostFederationUUIDAgent operation middleware
func (sh *strictHandler) PostFederationUUIDAgent(ctx echo.Context, uUID Uuid) error {
	var request PostFederationUUIDAgentRequestObject

	request.UUID = uUID

	var body PostFederationUUIDAgentJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostFederationUUIDAgent(ctx.Request().Context(), request.(PostFederationUUIDAgentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostFederationUUIDAgent")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostFederationUUIDAgentResponseObject); ok {
		return validResponse.VisitPostFederationUUIDAgentResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteFederationUUIDAgentEntityUUID operation middleware
func (sh *strictHandler) DeleteFederationUUIDAgentEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error {
	var request DeleteFederationUUIDAgentEntityUUIDRequestObject

	request.UUID = uUID
	request.EntityUUID = entityUUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFederationUUIDAgentEntityUUID(ctx.Request().Context(), request.(DeleteFederationUUIDAgentEntityUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFederationUUIDAgentEntityUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteFederationUUIDAgentEntityUUIDResponseObject); ok {
		return validResponse.VisitDeleteFederationUUIDAgentEntityUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchFederationUUIDAgentEntityUUID operation middleware
func (sh *strictHandler) PatchFederationUUIDAgentEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error {
	var request PatchFederationUUIDAgentEntityUUIDRequestObject

	request.UUID = uUID
	request.EntityUUID = entityUUID

	var body PatchFederationUUIDAgentEntityUUIDJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchFederationUUIDAgentEntityUUID(ctx.Request().Context(), request.(PatchFederationUUIDAgentEntityUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchFederationUUIDAgentEntityUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchFederationUUIDAgentEntityUUIDResponseObject); ok {
		return validResponse.VisitPatchFederationUUIDAgentEntityUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetFederationUUIDInvite operation middleware
func (sh *strictHandler) GetFederationUUIDInvite(ctx echo.Context, uUID Uuid) error {
	var request GetFederationUUIDInviteRequestObject

	request.UUID = uUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetFederationUUIDInvite(ctx.Request().Context(), request.(GetFederationUUIDInviteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFederationUUIDInvite")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetFederationUUIDInviteResponseObject); ok {
		return validResponse.VisitGetFederationUUIDInviteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostFederationUUIDInvite operation middleware
func (sh *strictHandler) PostFederationUUIDInvite(ctx echo.Context, uUID Uuid) error {
	var request PostFederationUUIDInviteRequestObject

	request.UUID = uUID

	var body PostFederationUUIDInviteJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostFederationUUIDInvite(ctx.Request().Context(), request.(PostFederationUUIDInviteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostFederationUUIDInvite")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostFederationUUIDInviteResponseObject); ok {
		return validResponse.VisitPostFederationUUIDInviteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteFederationUUIDInviteEntityUUID operation middleware
func (sh *strictHandler) DeleteFederationUUIDInviteEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error {
	var request DeleteFederationUUIDInviteEntityUUIDRequestObject

	request.UUID = uUID
	request.EntityUUID = entityUUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFederationUUIDInviteEntityUUID(ctx.Request().Context(), request.(DeleteFederationUUIDInviteEntityUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFederationUUIDInviteEntityUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteFederationUUIDInviteEntityUUIDResponseObject); ok {
		return validResponse.VisitDeleteFederationUUIDInviteEntityUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchFederationUUIDName operation middleware
func (sh *strictHandler) PatchFederationUUIDName(ctx echo.Context, uUID Uuid) error {
	var request PatchFederationUUIDNameRequestObject

	request.UUID = uUID

	var body PatchFederationUUIDNameJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchFederationUUIDName(ctx.Request().Context(), request.(PatchFederationUUIDNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchFederationUUIDName")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchFederationUUIDNameResponseObject); ok {
		return validResponse.VisitPatchFederationUUIDNameResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetFederationUUIDProject operation middleware
func (sh *strictHandler) GetFederationUUIDProject(ctx echo.Context, uUID Uuid, params GetFederationUUIDProjectParams) error {
	var request GetFederationUUIDProjectRequestObject

	request.UUID = uUID
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetFederationUUIDProject(ctx.Request().Context(), request.(GetFederationUUIDProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFederationUUIDProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetFederationUUIDProjectResponseObject); ok {
		return validResponse.VisitGetFederationUUIDProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostFederationUUIDUser operation middleware
func (sh *strictHandler) PostFederationUUIDUser(ctx echo.Context, uUID Uuid) error {
	var request PostFederationUUIDUserRequestObject

	request.UUID = uUID

	var body PostFederationUUIDUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostFederationUUIDUser(ctx.Request().Context(), request.(PostFederationUUIDUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostFederationUUIDUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostFederationUUIDUserResponseObject); ok {
		return validResponse.VisitPostFederationUUIDUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteFederationUUIDUserUserUUID operation middleware
func (sh *strictHandler) DeleteFederationUUIDUserUserUUID(ctx echo.Context, uUID Uuid, userUUID UserUUID) error {
	var request DeleteFederationUUIDUserUserUUIDRequestObject

	request.UUID = uUID
	request.UserUUID = userUUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFederationUUIDUserUserUUID(ctx.Request().Context(), request.(DeleteFederationUUIDUserUserUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFederationUUIDUserUserUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteFederationUUIDUserUserUUIDResponseObject); ok {
		return validResponse.VisitDeleteFederationUUIDUserUserUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteGroupUUIDUser operation middleware
func (sh *strictHandler) DeleteGroupUUIDUser(ctx echo.Context, uUID Uuid) error {
	var request DeleteGroupUUIDUserRequestObject

	request.UUID = uUID

	var body DeleteGroupUUIDUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteGroupUUIDUser(ctx.Request().Context(), request.(DeleteGroupUUIDUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteGroupUUIDUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteGroupUUIDUserResponseObject); ok {
		return validResponse.VisitDeleteGroupUUIDUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetGroupUUIDUser operation middleware
func (sh *strictHandler) GetGroupUUIDUser(ctx echo.Context, uUID Uuid) error {
	var request GetGroupUUIDUserRequestObject

	request.UUID = uUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetGroupUUIDUser(ctx.Request().Context(), request.(GetGroupUUIDUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroupUUIDUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetGroupUUIDUserResponseObject); ok {
		return validResponse.VisitGetGroupUUIDUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostGroupUUIDUser operation middleware
func (sh *strictHandler) PostGroupUUIDUser(ctx echo.Context, uUID Uuid) error {
	var request PostGroupUUIDUserRequestObject

	request.UUID = uUID

	var body PostGroupUUIDUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostGroupUUIDUser(ctx.Request().Context(), request.(PostGroupUUIDUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostGroupUUIDUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostGroupUUIDUserResponseObject); ok {
		return validResponse.VisitPostGroupUUIDUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteLegalEntities operation middleware
func (sh *strictHandler) DeleteLegalEntities(ctx echo.Context) error {
	var request DeleteLegalEntitiesRequestObject

	var body DeleteLegalEntitiesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteLegalEntities(ctx.Request().Context(), request.(DeleteLegalEntitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteLegalEntities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteLegalEntitiesResponseObject); ok {
		return validResponse.VisitDeleteLegalEntitiesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetLegalEntities operation middleware
func (sh *strictHandler) GetLegalEntities(ctx echo.Context) error {
	var request GetLegalEntitiesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetLegalEntities(ctx.Request().Context(), request.(GetLegalEntitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLegalEntities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetLegalEntitiesResponseObject); ok {
		return validResponse.VisitGetLegalEntitiesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchLegalEntities operation middleware
func (sh *strictHandler) PatchLegalEntities(ctx echo.Context) error {
	var request PatchLegalEntitiesRequestObject

	var body PatchLegalEntitiesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchLegalEntities(ctx.Request().Context(), request.(PatchLegalEntitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchLegalEntities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchLegalEntitiesResponseObject); ok {
		return validResponse.VisitPatchLegalEntitiesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostLegalEntities operation middleware
func (sh *strictHandler) PostLegalEntities(ctx echo.Context) error {
	var request PostLegalEntitiesRequestObject

	var body PostLegalEntitiesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostLegalEntities(ctx.Request().Context(), request.(PostLegalEntitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLegalEntities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostLegalEntitiesResponseObject); ok {
		return validResponse.VisitPostLegalEntitiesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostPermissions operation middleware
func (sh *strictHandler) PostPermissions(ctx echo.Context) error {
	var request PostPermissionsRequestObject

	var body PostPermissionsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostPermissions(ctx.Request().Context(), request.(PostPermissionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPermissions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostPermissionsResponseObject); ok {
		return validResponse.VisitPostPermissionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeletePermissionsUUID operation middleware
func (sh *strictHandler) DeletePermissionsUUID(ctx echo.Context, uUID Uuid) error {
	var request DeletePermissionsUUIDRequestObject

	request.UUID = uUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePermissionsUUID(ctx.Request().Context(), request.(DeletePermissionsUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePermissionsUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeletePermissionsUUIDResponseObject); ok {
		return validResponse.VisitDeletePermissionsUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetPermissionsUUID operation middleware
func (sh *strictHandler) GetPermissionsUUID(ctx echo.Context, uUID Uuid) error {
	var request GetPermissionsUUIDRequestObject

	request.UUID = uUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPermissionsUUID(ctx.Request().Context(), request.(GetPermissionsUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPermissionsUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetPermissionsUUIDResponseObject); ok {
		return validResponse.VisitGetPermissionsUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostProfileSurvey operation middleware
func (sh *strictHandler) PostProfileSurvey(ctx echo.Context) error {
	var request PostProfileSurveyRequestObject

	var body PostProfileSurveyJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostProfileSurvey(ctx.Request().Context(), request.(PostProfileSurveyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProfileSurvey")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostProfileSurveyResponseObject); ok {
		return validResponse.VisitPostProfileSurveyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteProfileSurveyUUID operation middleware
func (sh *strictHandler) DeleteProfileSurveyUUID(ctx echo.Context, uUID Uuid) error {
	var request DeleteProfileSurveyUUIDRequestObject

	request.UUID = uUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProfileSurveyUUID(ctx.Request().Context(), request.(DeleteProfileSurveyUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProfileSurveyUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteProfileSurveyUUIDResponseObject); ok {
		return validResponse.VisitDeleteProfileSurveyUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetProfileSurveyUUID operation middleware
func (sh *strictHandler) GetProfileSurveyUUID(ctx echo.Context, uUID Uuid) error {
	var request GetProfileSurveyUUIDRequestObject

	request.UUID = uUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProfileSurveyUUID(ctx.Request().Context(), request.(GetProfileSurveyUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProfileSurveyUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetProfileSurveyUUIDResponseObject); ok {
		return validResponse.VisitGetProfileSurveyUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostProject operation middleware
func (sh *strictHandler) PostProject(ctx echo.Context) error {
	var request PostProjectRequestObject

	var body PostProjectJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostProject(ctx.Request().Context(), request.(PostProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostProjectResponseObject); ok {
		return validResponse.VisitPostProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteProjectUUID operation middleware
func (sh *strictHandler) DeleteProjectUUID(ctx echo.Context, uUID Uuid) error {
	var request DeleteProjectUUIDRequestObject

	request.UUID = uUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectUUID(ctx.Request().Context(), request.(DeleteProjectUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteProjectUUIDResponseObject); ok {
		return validResponse.VisitDeleteProjectUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetProjectUUID operation middleware
func (sh *strictHandler) GetProjectUUID(ctx echo.Context, uUID Uuid) error {
	var request GetProjectUUIDRequestObject

	request.UUID = uUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectUUID(ctx.Request().Context(), request.(GetProjectUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetProjectUUIDResponseObject); ok {
		return validResponse.VisitGetProjectUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchProjectUUID operation middleware
func (sh *strictHandler) PatchProjectUUID(ctx echo.Context, uUID Uuid) error {
	var request PatchProjectUUIDRequestObject

	request.UUID = uUID

	var body PatchProjectUUIDJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchProjectUUID(ctx.Request().Context(), request.(PatchProjectUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchProjectUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchProjectUUIDResponseObject); ok {
		return validResponse.VisitPatchProjectUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetProjectUUIDCatalog operation middleware
func (sh *strictHandler) GetProjectUUIDCatalog(ctx echo.Context, uUID Uuid) error {
	var request GetProjectUUIDCatalogRequestObject

	request.UUID = uUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectUUIDCatalog(ctx.Request().Context(), request.(GetProjectUUIDCatalogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectUUIDCatalog")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetProjectUUIDCatalogResponseObject); ok {
		return validResponse.VisitGetProjectUUIDCatalogResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostProjectUUIDCatalog operation middleware
func (sh *strictHandler) PostProjectUUIDCatalog(ctx echo.Context, uUID Uuid) error {
	var request PostProjectUUIDCatalogRequestObject

	request.UUID = uUID

	var body PostProjectUUIDCatalogJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostProjectUUIDCatalog(ctx.Request().Context(), request.(PostProjectUUIDCatalogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProjectUUIDCatalog")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostProjectUUIDCatalogResponseObject); ok {
		return validResponse.VisitPostProjectUUIDCatalogResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetProjectUUIDCatalogEntityName operation middleware
func (sh *strictHandler) GetProjectUUIDCatalogEntityName(ctx echo.Context, uUID Uuid, entityName EntityName) error {
	var request GetProjectUUIDCatalogEntityNameRequestObject

	request.UUID = uUID
	request.EntityName = entityName

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectUUIDCatalogEntityName(ctx.Request().Context(), request.(GetProjectUUIDCatalogEntityNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectUUIDCatalogEntityName")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetProjectUUIDCatalogEntityNameResponseObject); ok {
		return validResponse.VisitGetProjectUUIDCatalogEntityNameResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteProjectUUIDCatalogEntityUUID operation middleware
func (sh *strictHandler) DeleteProjectUUIDCatalogEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error {
	var request DeleteProjectUUIDCatalogEntityUUIDRequestObject

	request.UUID = uUID
	request.EntityUUID = entityUUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectUUIDCatalogEntityUUID(ctx.Request().Context(), request.(DeleteProjectUUIDCatalogEntityUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectUUIDCatalogEntityUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteProjectUUIDCatalogEntityUUIDResponseObject); ok {
		return validResponse.VisitDeleteProjectUUIDCatalogEntityUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchProjectUUIDDescription operation middleware
func (sh *strictHandler) PatchProjectUUIDDescription(ctx echo.Context, uUID Uuid) error {
	var request PatchProjectUUIDDescriptionRequestObject

	request.UUID = uUID

	var body PatchProjectUUIDDescriptionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchProjectUUIDDescription(ctx.Request().Context(), request.(PatchProjectUUIDDescriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchProjectUUIDDescription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchProjectUUIDDescriptionResponseObject); ok {
		return validResponse.VisitPatchProjectUUIDDescriptionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteProjectUUIDFieldEntityUUID operation middleware
func (sh *strictHandler) DeleteProjectUUIDFieldEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error {
	var request DeleteProjectUUIDFieldEntityUUIDRequestObject

	request.UUID = uUID
	request.EntityUUID = entityUUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectUUIDFieldEntityUUID(ctx.Request().Context(), request.(DeleteProjectUUIDFieldEntityUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectUUIDFieldEntityUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteProjectUUIDFieldEntityUUIDResponseObject); ok {
		return validResponse.VisitDeleteProjectUUIDFieldEntityUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostProjectUUIDFieldEntityUUID operation middleware
func (sh *strictHandler) PostProjectUUIDFieldEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error {
	var request PostProjectUUIDFieldEntityUUIDRequestObject

	request.UUID = uUID
	request.EntityUUID = entityUUID

	var body PostProjectUUIDFieldEntityUUIDJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostProjectUUIDFieldEntityUUID(ctx.Request().Context(), request.(PostProjectUUIDFieldEntityUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProjectUUIDFieldEntityUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostProjectUUIDFieldEntityUUIDResponseObject); ok {
		return validResponse.VisitPostProjectUUIDFieldEntityUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchProjectUUIDGraph operation middleware
func (sh *strictHandler) PatchProjectUUIDGraph(ctx echo.Context, uUID Uuid) error {
	var request PatchProjectUUIDGraphRequestObject

	request.UUID = uUID

	var body PatchProjectUUIDGraphJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchProjectUUIDGraph(ctx.Request().Context(), request.(PatchProjectUUIDGraphRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchProjectUUIDGraph")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchProjectUUIDGraphResponseObject); ok {
		return validResponse.VisitPatchProjectUUIDGraphResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchProjectUUIDName operation middleware
func (sh *strictHandler) PatchProjectUUIDName(ctx echo.Context, uUID Uuid) error {
	var request PatchProjectUUIDNameRequestObject

	request.UUID = uUID

	var body PatchProjectUUIDNameJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchProjectUUIDName(ctx.Request().Context(), request.(PatchProjectUUIDNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchProjectUUIDName")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchProjectUUIDNameResponseObject); ok {
		return validResponse.VisitPatchProjectUUIDNameResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchProjectUUIDOptions operation middleware
func (sh *strictHandler) PatchProjectUUIDOptions(ctx echo.Context, uUID Uuid) error {
	var request PatchProjectUUIDOptionsRequestObject

	request.UUID = uUID

	var body PatchProjectUUIDOptionsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchProjectUUIDOptions(ctx.Request().Context(), request.(PatchProjectUUIDOptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchProjectUUIDOptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchProjectUUIDOptionsResponseObject); ok {
		return validResponse.VisitPatchProjectUUIDOptionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetProjectUUIDStatus operation middleware
func (sh *strictHandler) GetProjectUUIDStatus(ctx echo.Context, uUID Uuid) error {
	var request GetProjectUUIDStatusRequestObject

	request.UUID = uUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectUUIDStatus(ctx.Request().Context(), request.(GetProjectUUIDStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectUUIDStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetProjectUUIDStatusResponseObject); ok {
		return validResponse.VisitGetProjectUUIDStatusResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostProjectUUIDStatus operation middleware
func (sh *strictHandler) PostProjectUUIDStatus(ctx echo.Context, uUID Uuid) error {
	var request PostProjectUUIDStatusRequestObject

	request.UUID = uUID

	var body PostProjectUUIDStatusJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostProjectUUIDStatus(ctx.Request().Context(), request.(PostProjectUUIDStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProjectUUIDStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostProjectUUIDStatusResponseObject); ok {
		return validResponse.VisitPostProjectUUIDStatusResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteProjectUUIDStatusEntityUUID operation middleware
func (sh *strictHandler) DeleteProjectUUIDStatusEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error {
	var request DeleteProjectUUIDStatusEntityUUIDRequestObject

	request.UUID = uUID
	request.EntityUUID = entityUUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectUUIDStatusEntityUUID(ctx.Request().Context(), request.(DeleteProjectUUIDStatusEntityUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectUUIDStatusEntityUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteProjectUUIDStatusEntityUUIDResponseObject); ok {
		return validResponse.VisitDeleteProjectUUIDStatusEntityUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchProjectUUIDStatusEntityUUID operation middleware
func (sh *strictHandler) PatchProjectUUIDStatusEntityUUID(ctx echo.Context, uUID Uuid, entityUUID EntityUUID) error {
	var request PatchProjectUUIDStatusEntityUUIDRequestObject

	request.UUID = uUID
	request.EntityUUID = entityUUID

	var body PatchProjectUUIDStatusEntityUUIDJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchProjectUUIDStatusEntityUUID(ctx.Request().Context(), request.(PatchProjectUUIDStatusEntityUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchProjectUUIDStatusEntityUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchProjectUUIDStatusEntityUUIDResponseObject); ok {
		return validResponse.VisitPatchProjectUUIDStatusEntityUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostProjectUUIDUser operation middleware
func (sh *strictHandler) PostProjectUUIDUser(ctx echo.Context, uUID Uuid) error {
	var request PostProjectUUIDUserRequestObject

	request.UUID = uUID

	var body PostProjectUUIDUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostProjectUUIDUser(ctx.Request().Context(), request.(PostProjectUUIDUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProjectUUIDUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostProjectUUIDUserResponseObject); ok {
		return validResponse.VisitPostProjectUUIDUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteProjectUUIDUserUserUUID operation middleware
func (sh *strictHandler) DeleteProjectUUIDUserUserUUID(ctx echo.Context, uUID Uuid, userUUID UserUUID) error {
	var request DeleteProjectUUIDUserUserUUIDRequestObject

	request.UUID = uUID
	request.UserUUID = userUUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectUUIDUserUserUUID(ctx.Request().Context(), request.(DeleteProjectUUIDUserUserUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectUUIDUserUserUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteProjectUUIDUserUserUUIDResponseObject); ok {
		return validResponse.VisitDeleteProjectUUIDUserUserUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTag operation middleware
func (sh *strictHandler) GetTag(ctx echo.Context, params GetTagParams) error {
	var request GetTagRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTag(ctx.Request().Context(), request.(GetTagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTag")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTagResponseObject); ok {
		return validResponse.VisitGetTagResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTag operation middleware
func (sh *strictHandler) PostTag(ctx echo.Context) error {
	var request PostTagRequestObject

	var body PostTagJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTag(ctx.Request().Context(), request.(PostTagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTag")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTagResponseObject); ok {
		return validResponse.VisitPostTagResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTagUUID operation middleware
func (sh *strictHandler) DeleteTagUUID(ctx echo.Context, uUID Uuid) error {
	var request DeleteTagUUIDRequestObject

	request.UUID = uUID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTagUUID(ctx.Request().Context(), request.(DeleteTagUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTagUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTagUUIDResponseObject); ok {
		return validResponse.VisitDeleteTagUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchTagUUID operation middleware
func (sh *strictHandler) PatchTagUUID(ctx echo.Context, uUID Uuid) error {
	var request PatchTagUUIDRequestObject

	request.UUID = uUID

	var body PatchTagUUIDJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchTagUUID(ctx.Request().Context(), request.(PatchTagUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchTagUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchTagUUIDResponseObject); ok {
		return validResponse.VisitPatchTagUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(ctx echo.Context) error {
	var request GetUserRequestObject

	var body GetUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx.Request().Context(), request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		return validResponse.VisitGetUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
