{
	"info": {
		"_postman_id": "dc7b9adb-a220-42f8-a82c-8d6aa5be3873",
		"name": "RT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34065696"
	},
	"item": [
		{
			"name": "profile",
			"item": [
				{
					"name": "invite",
					"item": [
						{
							"name": "/profile/invite",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json()",
											"",
											"if (jsonData.items.length > 0) {",
											"pm.environment.set(\"inviteLastUUID\", jsonData.items[0].uuid);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/profile/invite",
									"host": [
										"{{domain}}"
									],
									"path": [
										"profile",
										"invite"
									]
								},
								"description": "Получение данных о всех приглашениях"
							},
							"response": []
						},
						{
							"name": "/profile/invite/{uuid}/accept",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{domain}}/profile/invite/{{inviteLastUUID}}/accept",
									"host": [
										"{{domain}}"
									],
									"path": [
										"profile",
										"invite",
										"{{inviteLastUUID}}",
										"accept"
									]
								},
								"description": "Принятия приглашения"
							},
							"response": []
						},
						{
							"name": "/profile/invite/{uuid}/decline",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{domain}}/profile/invite/{{inviteLastUUID}}/decline",
									"host": [
										"{{domain}}"
									],
									"path": [
										"profile",
										"invite",
										"{{inviteLastUUID}}",
										"decline"
									]
								},
								"description": "Отказ от приглашения"
							},
							"response": []
						}
					]
				},
				{
					"name": "likes",
					"item": [
						{
							"name": "/profile/like",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"uuid\" : \"{{projectLastUUID}}\",\n    \"type\" : \"project\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/profile/like",
									"host": [
										"{{domain}}"
									],
									"path": [
										"profile",
										"like"
									]
								},
								"description": "Лайкнуть проект"
							},
							"response": []
						},
						{
							"name": "/profile/like (company)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"uuid\" : \"{{companyLastUUID}}\",\n    \"type\" : \"company\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/profile/like",
									"host": [
										"{{domain}}"
									],
									"path": [
										"profile",
										"like"
									]
								},
								"description": "Лайкнуть компанию"
							},
							"response": []
						},
						{
							"name": "/profile/like (task)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"uuid\" : \"{{taskLastUUID}}\",\n    \"type\" : \"task\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/profile/like",
									"host": [
										"{{domain}}"
									],
									"path": [
										"profile",
										"like"
									]
								},
								"description": "Лайкнуть задачу"
							},
							"response": []
						},
						{
							"name": "/profile/likes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/profile/likes",
									"host": [
										"{{domain}}"
									],
									"path": [
										"profile",
										"likes"
									]
								},
								"description": "Получить все лайки"
							},
							"response": []
						},
						{
							"name": "/profile/dislike",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"uuid\" : \"{{projectLastUUID}}\",\n    \"type\" : \"project\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/profile/dislike",
									"host": [
										"{{domain}}"
									],
									"path": [
										"profile",
										"dislike"
									]
								},
								"description": "Отменить лайк"
							},
							"response": []
						}
					]
				},
				{
					"name": "notifications",
					"item": [
						{
							"name": "star",
							"item": [
								{
									"name": "/profile/notifications/task/{uuid}/star",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
													"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{domain}}/profile/notifications/task/{{taskLastUUID}}/star",
											"host": [
												"{{domain}}"
											],
											"path": [
												"profile",
												"notifications",
												"task",
												"{{taskLastUUID}}",
												"star"
											]
										},
										"description": "Поместить уведомление в закладки"
									},
									"response": []
								},
								{
									"name": "/profile/notifications/task/{uuid}/star",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
													"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
													"});",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{domain}}/profile/notifications/task/{{taskLastUUID}}/star",
											"host": [
												"{{domain}}"
											],
											"path": [
												"profile",
												"notifications",
												"task",
												"{{taskLastUUID}}",
												"star"
											]
										},
										"description": "Убрать уведомление из закладок"
									},
									"response": []
								}
							]
						},
						{
							"name": "/profile/notifications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											" ",
											"var jsonData = pm.response.json()",
											" ",
											"if (jsonData.items.length > 0) {",
											"    pm.environment.set(\"notificationLastUUID\", jsonData.items[0].uuid);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/profile/notifications",
									"host": [
										"{{domain}}"
									],
									"path": [
										"profile",
										"notifications"
									]
								},
								"description": "Получение всех уведомлений"
							},
							"response": []
						},
						{
							"name": "/profile/notifications/{uuid}/hide",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"  ",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{domain}}/profile/notifications/task/{{notificationLastUUID}}/hide",
									"host": [
										"{{domain}}"
									],
									"path": [
										"profile",
										"notifications",
										"task",
										"{{notificationLastUUID}}",
										"hide"
									]
								},
								"description": "Скрыть уведомление"
							},
							"response": []
						},
						{
							"name": "/profile/notification(s)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumLongResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/Users/devlet/Downloads/girls.jpg"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/profile/notifications",
									"host": [
										"{{domain}}"
									],
									"path": [
										"profile",
										"notifications"
									]
								},
								"description": "Удалить все уведомления"
							},
							"response": []
						}
					]
				},
				{
					"name": "survey",
					"item": [
						{
							"name": "survey",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json()",
											"",
											"pm.test(\"Json uuid is not empty\", function () { ",
											"    pm.expect(jsonData.uuid).to.be.not.empty;",
											"});",
											" ",
											"pm.environment.set(\"surveyLastUUID\", jsonData.uuid);",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\" : \"asdasd\",\n    \"body\" : {\n        \"xxx\" : \"ddd\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/profile/survey",
									"host": [
										"{{domain}}"
									],
									"path": [
										"profile",
										"survey"
									]
								},
								"description": "Отправить анкету"
							},
							"response": []
						},
						{
							"name": "survey",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\" : \"asdasd\",\n    \"body\" : {\n        \"xxx\" : \"ddd\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/profile/survey/{{surveyLastUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"profile",
										"survey",
										"{{surveyLastUUID}}"
									]
								},
								"description": "Получить данные анкеты"
							},
							"response": []
						},
						{
							"name": "survey/{uuid}",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{domain}}/profile/survey/{{surveyLastUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"profile",
										"survey",
										"{{surveyLastUUID}}"
									]
								},
								"description": "Удалить анкету"
							},
							"response": []
						}
					]
				},
				{
					"name": "/profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});",
									" ",
									"pm.environment.set(\"usersLastUUID\", jsonData.uuid);",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"student\",\n    \"lname\" : \"student\",\n    \"pname\" : \"student\",\n    \"email\" : \"student@learning.com\",\n    \"password\" : \"pass\",\n    \"phone\" : 79001002020\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/profile",
							"host": [
								"{{domain}}"
							],
							"path": [
								"profile"
							]
						},
						"description": "Создать профиль"
					},
					"response": []
				},
				{
					"name": "/profile (int)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let int = pm.environment.get(\"int\") ?? 0",
									"if (int > 3) {",
									"    int = 0",
									"}",
									"pm.environment.set(\"int\", int + 1);",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});",
									" ",
									"pm.environment.set(\"usersLastUUID\", jsonData.uuid);",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"student\",\n    \"lname\" : \"student\",\n    \"pname\" : \"student\",\n    \"email\" : \"student@learning.com\",\n    \"password\" : \"pass\",\n    \"phone\" : 79001002020\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/profile",
							"host": [
								"{{domain}}"
							],
							"path": [
								"profile"
							]
						},
						"description": "Создать несколько профилей"
					},
					"response": []
				},
				{
					"name": "/profile/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json access_token is not empty\", function () { ",
									"    pm.expect(jsonData.access_token).to.be.not.empty;",
									"});",
									"",
									"pm.environment.set(\"access_token\", jsonData.access_token); ",
									"",
									"pm.environment.set(\"usersLastUUID\", jsonData.uuid);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": false,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\" : \"student@learning.com\",\n    \"password\" : \"pass\",\n    \"remember_me\" : true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/profile/login",
							"host": [
								"{{domain}}"
							],
							"path": [
								"profile",
								"login"
							]
						},
						"description": "Авторизоваться в системе"
					},
					"response": []
				},
				{
					"name": "/profile/login (int)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json access_token is not empty\", function () { ",
									"    pm.expect(jsonData.access_token).to.be.not.empty;",
									"});",
									"",
									"pm.environment.set(\"access_token\", jsonData.access_token); ",
									"",
									"if (jsonData.uuid != null) {",
									"    pm.environment.set(\"userLastUUID\", jsonData.uuid);  ",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": false,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\" : \"student@learning.com\",\n    \"password\" : \"pass\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/profile/login",
							"host": [
								"{{domain}}"
							],
							"path": [
								"profile",
								"login"
							]
						},
						"description": "Авторизоваться в системе несколькими пользователями"
					},
					"response": []
				},
				{
					"name": "/profile/login_as",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json access_token is not empty\", function () { ",
									"    pm.expect(jsonData.access_token).to.be.not.empty;",
									"});",
									"",
									"pm.environment.set(\"access_token\", jsonData.access_token); ",
									"",
									"if (jsonData.uuid != null) {",
									"    pm.environment.set(\"userLastUUID\", jsonData.uuid); ",
									"",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": false,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\" : \"student@learning.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/profile/login_as",
							"host": [
								"{{domain}}"
							],
							"path": [
								"profile",
								"login_as"
							]
						},
						"description": "Авторизоваться без пароля"
					},
					"response": []
				},
				{
					"name": "/profile/reset/send",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" ",
									"pm.test(\"Hint is present\", function () {",
									"    pm.response.to.have.header(\"Hint\");",
									"",
									"    hint = pm.response.headers.get(\"Hint\")",
									"    pm.environment.set(\"userResetCode\", hint);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": false,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\" : \"student@learning.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/profile/reset/send",
							"host": [
								"{{domain}}"
							],
							"path": [
								"profile",
								"reset",
								"send"
							]
						},
						"description": "Отправить письмо для сброса пароля"
					},
					"response": []
				},
				{
					"name": "/profile/reset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": false,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\" : \"{{userResetCode}}\",\n    \"password\" : \"secret\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/profile/reset",
							"host": [
								"{{domain}}"
							],
							"path": [
								"profile",
								"reset"
							]
						},
						"description": "Сбросить пароль"
					},
					"response": []
				},
				{
					"name": "/profile/logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disableCookies": false,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/profile/logout",
							"host": [
								"{{domain}}"
							],
							"path": [
								"profile",
								"logout"
							]
						},
						"description": "Выйти из профиля"
					},
					"response": []
				},
				{
					"name": "/profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" ",
									"var jd = pm.response.json()",
									"",
									"pm.test(\"Json email is not empty\", function () { ",
									"    pm.expect(jd.email).to.be.not.empty;",
									"});",
									"",
									"pm.test(\"Json name is not empty\", function () { ",
									"    pm.expect(jd.name).to.be.not.empty;",
									"});",
									" ",
									"pm.environment.set(\"usersLastUUID\", jd.uuid);",
									"",
									"var jsonData = pm.response.json()",
									" ",
									" if (jsonData.federations.length > 0) {",
									"    let ln = jsonData.federations.length - 1",
									"pm.environment.set(\"federationLastUUID\", jsonData.federations[ln].uuid); ",
									"}",
									"",
									"",
									"if (jsonData.companies.length > 0) {",
									"    let ln = jsonData.companies.length - 1",
									"pm.environment.set(\"federationLastUUID\", jsonData.companies[ln].federation_uuid);",
									"",
									"",
									"pm.environment.set(\"companyLastUUID\", jsonData.companies[0].uuid);",
									"",
									"}",
									"",
									"if (jsonData.projects.length > 0) {",
									"    ",
									"    pm.environment.set(\"projectLastUUID\", jsonData.projects[0].uuid);",
									"",
									"    pm.environment.set(\"federationLastUUID\", jsonData.projects[0].federation_uuid);",
									"",
									" pm.environment.set(\"companyLastUUID\", jsonData.projects[0].company_uuid);",
									"",
									" }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/profile",
							"host": [
								"{{domain}}"
							],
							"path": [
								"profile"
							]
						},
						"description": "Получить данные профиля"
					},
					"response": []
				},
				{
					"name": "/profile/validate/send",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"minimum = parseInt(pm.environment.get(\"minimumLongResponseTime\"))",
									"",
									"pm.test(`Response time is less than ${{minimum}} ms`, function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Hint is present\", function () {",
									"    pm.response.to.have.header(\"Hint\");",
									"",
									"    hint = pm.response.headers.get(\"Hint\")",
									"    pm.environment.set(\"userValidationCode\", hint);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\" : \"student@learning.com\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/profile/validate/send",
							"host": [
								"{{domain}}"
							],
							"path": [
								"profile",
								"validate",
								"send"
							]
						},
						"description": "Отправить письмо для подтверждения почты"
					},
					"response": []
				},
				{
					"name": "/profile/validate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\" : \"{{userValidationCode}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/profile/validate",
							"host": [
								"{{domain}}"
							],
							"path": [
								"profile",
								"validate"
							]
						},
						"description": "Подтвердить почту"
					},
					"response": []
				},
				{
					"name": "/profile/validate-simple/send",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"minimum = parseInt(pm.environment.get(\"minimumLongResponseTime\"))",
									"",
									"pm.test(`Response time is less than ${{minimum}} ms`, function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Hint is present\", function () {",
									"    pm.response.to.have.header(\"Hint\");",
									"",
									"    hint = pm.response.headers.get(\"Hint\")",
									"    pm.environment.set(\"userValidationCode\", hint);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\" : \"student@learning.com\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/profile/validate-simple/send",
							"host": [
								"{{domain}}"
							],
							"path": [
								"profile",
								"validate-simple",
								"send"
							]
						},
						"description": "Отправить письмо для подтверждения почты"
					},
					"response": []
				},
				{
					"name": "/profile/validate-simple",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\" : \"student@learning.com\",\n    \"code\" : {{userValidationCode}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/profile/validate-simple",
							"host": [
								"{{domain}}"
							],
							"path": [
								"profile",
								"validate-simple"
							]
						},
						"description": "Подтвердить почту"
					},
					"response": []
				},
				{
					"name": "/profile/change_password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": false
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\" : \"secret\",\n    \"new_password\" : \"secret\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/profile/password",
							"host": [
								"{{domain}}"
							],
							"path": [
								"profile",
								"password"
							]
						},
						"description": "Сменить пароль"
					},
					"response": []
				},
				{
					"name": "/profile/color",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": false
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"color\" : \"#101010\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/profile/color",
							"host": [
								"{{domain}}"
							],
							"path": [
								"profile",
								"color"
							]
						},
						"description": "Сменить цвет профиля"
					},
					"response": []
				},
				{
					"name": "/profile/photo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumLongResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": false
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1eea13fd-e5a8-4570-8f6e-ef8fa972bd2b"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/profile/photo",
							"host": [
								"{{domain}}"
							],
							"path": [
								"profile",
								"photo"
							]
						},
						"description": "Сменить фото профиля"
					},
					"response": []
				},
				{
					"name": "/profile/fio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumLongResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": false
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n    \"name\" : \"student\",\n    \"pname\" : \"student\",\n    \"lname\" : \"student\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/profile/fio",
							"host": [
								"{{domain}}"
							],
							"path": [
								"profile",
								"fio"
							]
						},
						"description": "Сменить ФИО"
					},
					"response": []
				},
				{
					"name": "/profile/phone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumLongResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": false
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"phone\" : 79268887766\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/profile/phone",
							"host": [
								"{{domain}}"
							],
							"path": [
								"profile",
								"phone"
							]
						},
						"description": "Сменить номер профиля"
					},
					"response": []
				},
				{
					"name": "/profile/preferences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumLongResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": false
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"timezone\" : \"Europe/Moscow\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/profile/preferences",
							"host": [
								"{{domain}}"
							],
							"path": [
								"profile",
								"preferences"
							]
						},
						"description": "Сменить временную зону профиля"
					},
					"response": []
				},
				{
					"name": "/profile/photo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumLongResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableCookies": false
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/Users/devlet/Downloads/girls.jpg"
								}
							]
						},
						"url": {
							"raw": "{{domain}}/profile/photo",
							"host": [
								"{{domain}}"
							],
							"path": [
								"profile",
								"photo"
							]
						},
						"description": "Удалить фото профиля"
					},
					"response": []
				},
				{
					"name": "/profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{domain}}/profile",
							"host": [
								"{{domain}}"
							],
							"path": [
								"profile"
							]
						},
						"description": "Удалить профиль"
					},
					"response": []
				}
			]
		},
		{
			"name": "federation",
			"item": [
				{
					"name": "invite",
					"item": [
						{
							"name": "federation/{uuid}/invite",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\" : \"student@learning.com\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/federation/{{federationLastUUID}}/invite",
									"host": [
										"{{domain}}"
									],
									"path": [
										"federation",
										"{{federationLastUUID}}",
										"invite"
									]
								},
								"description": "Создать приглашение в федерацию"
							},
							"response": []
						},
						{
							"name": "federation/{uuid}/invite (to company)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\" : \"student@learning.com\",\n    \"company_uuid\" : \"{{companyLastUUID}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/federation/{{federationLastUUID}}/invite",
									"host": [
										"{{domain}}"
									],
									"path": [
										"federation",
										"{{federationLastUUID}}",
										"invite"
									]
								},
								"description": "Направить приглашение в компанию"
							},
							"response": []
						},
						{
							"name": "federation/{uuid}/invite",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json()",
											"",
											"if (jsonData.items.length > 0) {",
											"    pm.environment.set(\"inviteLastUUID\", jsonData.items[0].uuid);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/federation/{{federationLastUUID}}/invite",
									"host": [
										"{{domain}}"
									],
									"path": [
										"federation",
										"{{federationLastUUID}}",
										"invite"
									]
								},
								"description": "Получить данные приглашений федерации"
							},
							"response": []
						},
						{
							"name": "federation/{uuid}/invite/{uuid}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{domain}}/federation/{{federationLastUUID}}/invite/{{inviteLastUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"federation",
										"{{federationLastUUID}}",
										"invite",
										"{{inviteLastUUID}}"
									]
								},
								"description": "Удалить приглашение"
							},
							"response": []
						}
					]
				},
				{
					"name": "federation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});",
									"",
									"pm.environment.set(\"federationLastUUID\", jsonData.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"my federation ({{$timestamp}})\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/federation",
							"host": [
								"{{domain}}"
							],
							"path": [
								"federation"
							]
						},
						"description": "If you create your first federation you will add yourself to the **federations's users** automaticly."
					},
					"response": []
				},
				{
					"name": "federation/{uuid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"my federation\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/federation/{{federationLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"federation",
								"{{federationLastUUID}}"
							]
						},
						"description": "Получить данные федерации"
					},
					"response": []
				},
				{
					"name": "federation/{uuid}/name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"updaed  name at {{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/federation/{{federationLastUUID}}/name",
							"host": [
								"{{domain}}"
							],
							"path": [
								"federation",
								"{{federationLastUUID}}",
								"name"
							]
						},
						"description": "Изменить название федерации"
					},
					"response": []
				},
				{
					"name": "federation/{uuid}/user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_uuid\" : \"{{usersLastUUID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/federation/{{federationLastUUID}}/user",
							"host": [
								"{{domain}}"
							],
							"path": [
								"federation",
								"{{federationLastUUID}}",
								"user"
							]
						},
						"description": "Добавить пользователя в федерацию"
					},
					"response": []
				},
				{
					"name": "federation/{uuid}/user/{uuid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"federation_uuid\": \"{{federationLastUUID}}\",\n    \"user_uuid\" : \"{{usersLastUUID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/federation/{{federationLastUUID}}/user/{{usersLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"federation",
								"{{federationLastUUID}}",
								"user",
								"{{usersLastUUID}}"
							]
						},
						"description": "Удалить пользователя из федерации"
					},
					"response": []
				},
				{
					"name": "federation/{uuid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"my federation\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/federation/{{federationLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"federation",
								"{{federationLastUUID}}"
							]
						},
						"description": "Удаление федерации"
					},
					"response": []
				}
			]
		},
		{
			"name": "company",
			"item": [
				{
					"name": "fields",
					"item": [
						{
							"name": "company/{uuid}/fields (1 - float)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json()",
											"",
											"pm.test(\"Json uuid is not empty\", function () { ",
											"    pm.expect(jsonData.uuid).to.be.not.empty;",
											"});",
											"",
											"pm.environment.set(\"fieldLastUUID\", jsonData.uuid);",
											"pm.environment.set(\"fieldLastFloatUUID\", jsonData.uuid);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\" : \"my field name ({{$timestamp}})\", \n    \"description\" : \"my field description ({{$timestamp}})\", \n    \"data_type\" : 1,\n    \"icon\" : \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/company/{{companyLastUUID}}/fields",
									"host": [
										"{{domain}}"
									],
									"path": [
										"company",
										"{{companyLastUUID}}",
										"fields"
									]
								},
								"description": "Создание полей в компании с типом данных 1"
							},
							"response": []
						},
						{
							"name": "company/{uuid}/fields (5)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json()",
											"",
											"pm.test(\"Json uuid is not empty\", function () { ",
											"    pm.expect(jsonData.uuid).to.be.not.empty;",
											"});",
											"",
											"pm.environment.set(\"fieldLastUUID\", jsonData.uuid);",
											"pm.environment.set(\"fieldLastSwitchUUID\", jsonData.uuid);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\" : \"my field name ({{$timestamp}})\", \n    \"data_type\" : 5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/company/{{companyLastUUID}}/fields",
									"host": [
										"{{domain}}"
									],
									"path": [
										"company",
										"{{companyLastUUID}}",
										"fields"
									]
								},
								"description": "Создание полей в компании с типом данных 5"
							},
							"response": []
						},
						{
							"name": "company/{uuid}/fields (6)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json()",
											"",
											"pm.test(\"Json uuid is not empty\", function () { ",
											"    pm.expect(jsonData.uuid).to.be.not.empty;",
											"});",
											"",
											"pm.environment.set(\"fieldLastUUID\", jsonData.uuid);",
											"pm.environment.set(\"fieldLastArrayUUID\", jsonData.uuid);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\" : \"my field name ({{$timestamp}})\", \n    \"data_type\" : 6\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/company/{{companyLastUUID}}/fields",
									"host": [
										"{{domain}}"
									],
									"path": [
										"company",
										"{{companyLastUUID}}",
										"fields"
									]
								},
								"description": "Создание полей в компании с типом данных 6"
							},
							"response": []
						},
						{
							"name": "company/{uuid}/fields (10) link",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json()",
											"",
											"pm.test(\"Json uuid is not empty\", function () { ",
											"    pm.expect(jsonData.uuid).to.be.not.empty;",
											"});",
											"",
											"pm.environment.set(\"fieldLastLinkUUID\", jsonData.uuid);",
											"pm.environment.set(\"fieldLastLinkUUID\", jsonData.uuid);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\" : \"my link ({{$timestamp}})\", \n    \"data_type\" : 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/company/{{companyLastUUID}}/fields",
									"host": [
										"{{domain}}"
									],
									"path": [
										"company",
										"{{companyLastUUID}}",
										"fields"
									]
								},
								"description": "Создание полей в компании с типом данных 10"
							},
							"response": []
						},
						{
							"name": "company/{uuid}/fields (12) time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json()",
											"",
											"pm.test(\"Json uuid is not empty\", function () { ",
											"    pm.expect(jsonData.uuid).to.be.not.empty;",
											"});",
											"",
											"pm.environment.set(\"fieldLastTimeUUID\", jsonData.uuid);",
											"pm.environment.set(\"fieldLastTimeUUID\", jsonData.uuid);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\" : \"my link ({{$timestamp}})\", \n    \"data_type\" : 12\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/company/{{companyLastUUID}}/fields",
									"host": [
										"{{domain}}"
									],
									"path": [
										"company",
										"{{companyLastUUID}}",
										"fields"
									]
								},
								"description": "Создание полей в компании с типом данных 12"
							},
							"response": []
						},
						{
							"name": "company/{uuid}/fields (14) people",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json()",
											"",
											"pm.test(\"Json uuid is not empty\", function () { ",
											"    pm.expect(jsonData.uuid).to.be.not.empty;",
											"});",
											"",
											"pm.environment.set(\"fieldLastPeopleUUID\", jsonData.uuid);",
											"pm.environment.set(\"fieldLastPeopleUUID\", jsonData.uuid);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\" : \"my people ({{$timestamp}})\", \n    \"data_type\" : 14\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/company/{{companyLastUUID}}/fields",
									"host": [
										"{{domain}}"
									],
									"path": [
										"company",
										"{{companyLastUUID}}",
										"fields"
									]
								},
								"description": "Создание полей в компании с типом данных 14"
							},
							"response": []
						},
						{
							"name": "company/{uuid}/fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/company/{{companyLastUUID}}/fields",
									"host": [
										"{{domain}}"
									],
									"path": [
										"company",
										"{{companyLastUUID}}",
										"fields"
									]
								},
								"description": "Получение полей компании"
							},
							"response": []
						},
						{
							"name": "company/{uuid}/fields/{uuid}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"new name\",\n    \"description\" : \"new description\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/company/{{companyLastUUID}}/fields/{{fieldLastUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"company",
										"{{companyLastUUID}}",
										"fields",
										"{{fieldLastUUID}}"
									]
								},
								"description": "Изменение полей в компании"
							},
							"response": []
						},
						{
							"name": "company/{uuid}/fields/{uuid}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{domain}}/company/{{companyLastUUID}}/fields/{{fieldLastUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"company",
										"{{companyLastUUID}}",
										"fields",
										"{{fieldLastUUID}}"
									]
								},
								"description": "Удаление полей в компании"
							},
							"response": []
						}
					]
				},
				{
					"name": "tags",
					"item": [
						{
							"name": "tag",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/tag?company_uuid={{companyLastUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"tag"
									],
									"query": [
										{
											"key": "company_uuid",
											"value": "{{companyLastUUID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json()",
											"",
											"pm.test(\"Json uuid is not empty\", function () { ",
											"    pm.expect(jsonData.uuid).to.be.not.empty;",
											"});",
											"",
											"pm.environment.set(\"tagLastUUID\", jsonData.uuid);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"company_uuid\" : \"{{companyLastUUID}}\",\n    \"name\": \"aaa\",\n    \"color\" : \"#000000\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/tag",
									"host": [
										"{{domain}}"
									],
									"path": [
										"tag"
									]
								},
								"description": "Создание тега"
							},
							"response": []
						},
						{
							"name": "tag/{uuid}",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{domain}}/tag/{{tagLastUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"tag",
										"{{tagLastUUID}}"
									]
								},
								"description": "Удаление тега"
							},
							"response": []
						},
						{
							"name": "tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"aaa\",\n    \"color\" : \"#000000\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/tag/{{tagLastUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"tag",
										"{{tagLastUUID}}"
									]
								},
								"description": "Измнение цвета и имени тега"
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "priorities",
					"item": [
						{
							"name": "priority",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json()",
											"",
											"pm.test(\"Json uuid is not empty\", function () { ",
											"    pm.expect(jsonData.uuid).to.be.not.empty;",
											"});",
											"",
											"pm.environment.set(\"priorityLastUUID\", jsonData.uuid);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"number\" : 13,\n    \"name\": \"12 Priority\",\n    \"color\" : \"#111111\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/company/{{companyLastUUID}}/priorities",
									"host": [
										"{{domain}}"
									],
									"path": [
										"company",
										"{{companyLastUUID}}",
										"priorities"
									]
								},
								"description": "Создание приоритета"
							},
							"response": []
						},
						{
							"name": "priorities",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/company/{{companyLastUUID}}/priorities",
									"host": [
										"{{domain}}"
									],
									"path": [
										"company",
										"{{companyLastUUID}}",
										"priorities"
									]
								},
								"description": "Получение всех приоритетов"
							},
							"response": []
						},
						{
							"name": "priority",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"aaa\",\n    \"color\" : \"#000000\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/company/{{companyLastUUID}}/priorities/{{priorityLastUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"company",
										"{{companyLastUUID}}",
										"priorities",
										"{{priorityLastUUID}}"
									]
								},
								"description": "Изменение цвета и имени приоритета"
							},
							"response": []
						},
						{
							"name": "priority/{uuid}",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{domain}}/company/{{companyLastUUID}}/priorities/{{priorityLastUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"company",
										"{{companyLastUUID}}",
										"priorities",
										"{{priorityLastUUID}}"
									]
								},
								"description": "Удаление приоритета"
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "sms",
					"item": [
						{
							"name": "company/{uuid}/sms/cost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json()",
											"",
											"pm.test(\"Json uuid is not empty\", function () { ",
											"    pm.expect(jsonData.uuid).to.be.not.empty;",
											"});",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"phone\" : 9772911424,\n    \"text\" : \"test cost api\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/company/{{companyLastUUID}}/sms/cost",
									"host": [
										"{{domain}}"
									],
									"path": [
										"company",
										"{{companyLastUUID}}",
										"sms",
										"cost"
									]
								},
								"description": "Создание компании"
							},
							"response": []
						},
						{
							"name": "company/{uuid}/sms/options",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"api\" : \"93B0918E-CC91-8653-C01D-xxxxxxxxx\",\n    \"from\" : \"sector\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/company/{{companyLastUUID}}/sms/options",
									"host": [
										"{{domain}}"
									],
									"path": [
										"company",
										"{{companyLastUUID}}",
										"sms",
										"options"
									]
								},
								"description": "Создание компании"
							},
							"response": []
						},
						{
							"name": "company/{uuid}/sms/send",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json()",
											"",
											"pm.test(\"Json uuid is not empty\", function () { ",
											"    pm.expect(jsonData.balance).to.be.not.empty;",
											"});",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Mock-Sms",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"phone\" : 9772911424,\n    \"text\" : \"Тест бека\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/company/{{companyLastUUID}}/sms/send",
									"host": [
										"{{domain}}"
									],
									"path": [
										"company",
										"{{companyLastUUID}}",
										"sms",
										"send"
									]
								},
								"description": "Создание компании"
							},
							"response": []
						},
						{
							"name": "company/{uuid}/sms",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json()",
											"",
											"pm.test(\"Json uuid is not empty\", function () { ",
											"    pm.expect(jsonData.items).to.be.not.empty;",
											"});",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/company/{{companyLastUUID}}/sms?limit=10&offset=0&is_my=true",
									"host": [
										"{{domain}}"
									],
									"path": [
										"company",
										"{{companyLastUUID}}",
										"sms"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "is_my",
											"value": "true"
										}
									]
								},
								"description": "Создание компании"
							},
							"response": []
						}
					]
				},
				{
					"name": "company",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});",
									"",
									"pm.environment.set(\"companyLastUUID\", jsonData.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"my company ({{$timestamp}})\",\n    \"federation_uuid\" : \"{{federationLastUUID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/company",
							"host": [
								"{{domain}}"
							],
							"path": [
								"company"
							]
						},
						"description": "Создание компании"
					},
					"response": []
				},
				{
					"name": "company/{uuid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/company/{{companyLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"company",
								"{{companyLastUUID}}"
							]
						},
						"description": "Получение данных компании"
					},
					"response": []
				},
				{
					"name": "company/{uuid}/name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"updaed company name at {{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/company/{{companyLastUUID}}/name",
							"host": [
								"{{domain}}"
							],
							"path": [
								"company",
								"{{companyLastUUID}}",
								"name"
							]
						},
						"description": "Изменение имени компании"
					},
					"response": []
				},
				{
					"name": "company/{uuid}/user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_uuid\" : \"{{usersLastUUID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/company/{{companyLastUUID}}/user",
							"host": [
								"{{domain}}"
							],
							"path": [
								"company",
								"{{companyLastUUID}}",
								"user"
							]
						},
						"description": "Добавление пользователя в компанию"
					},
					"response": []
				},
				{
					"name": "company/{uuid}/user/{uuid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"federation_uuid\": \"{{federationLastUUID}}\",\n    \"user_uuid\" : \"{{usersLastUUID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/company/{{companyLastUUID}}/user/{{usersLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"company",
								"{{companyLastUUID}}",
								"user",
								"{{usersLastUUID}}"
							]
						},
						"description": "Удаление пользователя из компании"
					},
					"response": []
				},
				{
					"name": "company/{uuid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{domain}}/company/{{companyLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"company",
								"{{companyLastUUID}}"
							]
						},
						"description": "Удаление компании"
					},
					"response": []
				}
			]
		},
		{
			"name": "group",
			"item": [
				{
					"name": "company/{uuid}/group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});",
									"",
									"pm.environment.set(\"groupLastUUID\", jsonData.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"my group ({{$timestamp}})\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/company/{{companyLastUUID}}/group",
							"host": [
								"{{domain}}"
							],
							"path": [
								"company",
								"{{companyLastUUID}}",
								"group"
							]
						},
						"description": "Создание отдела"
					},
					"response": []
				},
				{
					"name": "company/{uuid}/group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/company/{{companyLastUUID}}/group",
							"host": [
								"{{domain}}"
							],
							"path": [
								"company",
								"{{companyLastUUID}}",
								"group"
							]
						},
						"description": "Получение отделов"
					},
					"response": []
				},
				{
					"name": "company/{uuid}/group/{uuid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"my patched group ({{$timestamp}})\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/company/{{commentLastUUID}}/group/{{groupLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"company",
								"{{commentLastUUID}}",
								"group",
								"{{groupLastUUID}}"
							]
						},
						"description": "Изменение отделов"
					},
					"response": []
				},
				{
					"name": "company/{uuid}/group/{uuid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"}); ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"my group ({{$timestamp}})\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/company/{{companyLastUUID}}/group/{{groupLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"company",
								"{{companyLastUUID}}",
								"group",
								"{{groupLastUUID}}"
							]
						},
						"description": "Удаление отдела"
					},
					"response": []
				},
				{
					"name": "group/{uuid}/user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"uuid\": \"{{usersLastUUID}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/group/{{groupLastUUID}}/user",
							"host": [
								"{{domain}}"
							],
							"path": [
								"group",
								"{{groupLastUUID}}",
								"user"
							]
						},
						"description": "Добавление пользователя в отдел"
					},
					"response": []
				},
				{
					"name": "group/{uuid}/user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/group/{{groupLastUUID}}/user",
							"host": [
								"{{domain}}"
							],
							"path": [
								"group",
								"{{groupLastUUID}}",
								"user"
							]
						},
						"description": "Получение пользователей в отделе"
					},
					"response": []
				},
				{
					"name": "group/{uuid}/user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"uuid\": \"{{usersLastUUID}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/group/{{groupLastUUID}}/user",
							"host": [
								"{{domain}}"
							],
							"path": [
								"group",
								"{{groupLastUUID}}",
								"user"
							]
						},
						"description": "Удаление пользователя из отдела"
					},
					"response": []
				}
			]
		},
		{
			"name": "project",
			"item": [
				{
					"name": "fields",
					"item": [
						{
							"name": "project/{uuid}/field/{uuid} (float)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"required_on_statuses\": [1,2,3],\n    \"style\" : \"hide_when_empty\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/project/{{projectLastUUID}}/field/{{fieldLastFloatUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"project",
										"{{projectLastUUID}}",
										"field",
										"{{fieldLastFloatUUID}}"
									]
								},
								"description": "Создать поле в проекте"
							},
							"response": []
						},
						{
							"name": "project/{uuid}/field/{uuid} (switch)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"required_on_statuses\": [1,2,3,4]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/project/{{projectLastUUID}}/field/{{fieldLastSwitchUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"project",
										"{{projectLastUUID}}",
										"field",
										"{{fieldLastSwitchUUID}}"
									]
								},
								"description": "Создать поле свитч в проекте"
							},
							"response": []
						},
						{
							"name": "project/{uuid}/field/{uuid} (array)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"required_on_statuses\": [1,2,3,4]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/project/{{projectLastUUID}}/field/{{fieldLastArrayUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"project",
										"{{projectLastUUID}}",
										"field",
										"{{fieldLastArrayUUID}}"
									]
								},
								"description": "Создать поле массив в проекте"
							},
							"response": []
						},
						{
							"name": "project/{uuid}/field/{uuid} (link)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"required_on_statuses\": [1,2,3,4]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/project/{{projectLastUUID}}/field/{{fieldLastLinkUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"project",
										"{{projectLastUUID}}",
										"field",
										"{{fieldLastLinkUUID}}"
									]
								},
								"description": "Создать поле гипперсылки в проекте"
							},
							"response": []
						},
						{
							"name": "project/{uuid}/field/{uuid} (time)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"required_on_statuses\": [1,2,3,4]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/project/{{projectLastUUID}}/field/{{fieldLastTimeUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"project",
										"{{projectLastUUID}}",
										"field",
										"{{fieldLastTimeUUID}}"
									]
								},
								"description": "Создать поле времени в проекте"
							},
							"response": []
						},
						{
							"name": "project/{uuid}/field/{uuid} (people)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"required_on_statuses\": [1,2,3,4]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/project/{{projectLastUUID}}/field/{{fieldLastPeopleUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"project",
										"{{projectLastUUID}}",
										"field",
										"{{fieldLastPeopleUUID}}"
									]
								},
								"description": "Создать поле человек в проекте"
							},
							"response": []
						},
						{
							"name": "project/{uuid}/field/{uuid}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"require_cancelation_comment\" : true,\n   \"require_done_comment\": true,\n   \"color\":\"#111111\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/project/{{projectLastUUID}}/field/{{fieldLastUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"project",
										"{{projectLastUUID}}",
										"field",
										"{{fieldLastUUID}}"
									]
								},
								"description": "Удаление поля в проекте"
							},
							"response": []
						}
					]
				},
				{
					"name": "statuses",
					"item": [
						{
							"name": "project/{uuid}/status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json()",
											"",
											"pm.test(\"Json uuid is not empty\", function () { ",
											"    pm.expect(jsonData.uuid).to.be.not.empty;",
											"});",
											" ",
											"pm.environment.set(\"statusLastUUID\", jsonData.uuid);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"number\" : 10,\n    \"name\": \"aaa\",\n    \"color\" : \"#000000\",\n    \"description\" : \"description {{$timestamp}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/project/{{projectLastUUID}}/status",
									"host": [
										"{{domain}}"
									],
									"path": [
										"project",
										"{{projectLastUUID}}",
										"status"
									]
								},
								"description": "Создать статус в проекте"
							},
							"response": []
						},
						{
							"name": "project/{uuid}/status",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/project/{{projectLastUUID}}/status",
									"host": [
										"{{domain}}"
									],
									"path": [
										"project",
										"{{projectLastUUID}}",
										"status"
									]
								},
								"description": "Получить данные статусов"
							},
							"response": []
						},
						{
							"name": "project/{uuid}/status/{uuid}",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{domain}}/project/{{projectLastUUID}}/status/{{statusLastUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"project",
										"{{projectLastUUID}}",
										"status",
										"{{statusLastUUID}}"
									]
								},
								"description": "Удалить статус"
							},
							"response": []
						},
						{
							"name": "project/{uuid}/status/{uuid}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"aaa\",\n    \"color\" : \"#000000\",\n    \"description\" : \"description {{$timestamp}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/project/{{projectLastUUID}}/status/{{statusLastUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"project",
										"{{projectLastUUID}}",
										"status",
										"{{statusLastUUID}}"
									]
								},
								"description": "Изменить статус в проекте"
							},
							"response": []
						}
					]
				},
				{
					"name": "project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});",
									"",
									"pm.environment.set(\"projectLastUUID\", jsonData.uuid);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"my project ({{$timestamp}})\",\n    \"company_uuid\" : \"{{companyLastUUID}}\",\n    \"description\" : \"short description\", \n    \"responsible_by\" : \"student@learning.com\",\n    \"status\" : 1,\n    \"priority_enable\" : true,\n    \"status_sort\" : [1,2,0,3],\n    \"fields_sort\" : []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/project",
							"host": [
								"{{domain}}"
							],
							"path": [
								"project"
							]
						},
						"description": "Создать проект"
					},
					"response": []
				},
				{
					"name": "project/{uuid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"status\" : 5,\n   \"responsible_by\": \"student@learning.com\",\n   \"status_sort\" : [0,4,2,3],\n   \"fields_sort\" : [\"z\",\"w\",\"o\",\"p\"]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/project/{{projectLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"project",
								"{{projectLastUUID}}"
							]
						},
						"description": "Изменить проект"
					},
					"response": []
				},
				{
					"name": "project/{uuid}/name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"my project ({{$timestamp}})\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/project/{{projectLastUUID}}/name",
							"host": [
								"{{domain}}"
							],
							"path": [
								"project",
								"{{projectLastUUID}}",
								"name"
							]
						},
						"description": "Изменить имя в проекте"
					},
					"response": []
				},
				{
					"name": "project/{uuid}/description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\" : \"my description ({{$timestamp}})\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/project/{{projectLastUUID}}/description",
							"host": [
								"{{domain}}"
							],
							"path": [
								"project",
								"{{projectLastUUID}}",
								"description"
							]
						},
						"description": "Изменить описание в проекте"
					},
					"response": []
				},
				{
					"name": "project/{uuid}/graph",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"graph\": {\n      \"0\": [\n        \"1\"\n      ],\n      \"1\": [\n        \"2\"\n      ],\n      \"2\": [\n        \"3\"\n      ],\n      \"3\": [\n        \"4\"\n      ],\n      \"4\": [\n        \"5\"\n      ],\n      \"5\": [\n        \"2\"\n      ],\n      \"13\": []\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/project/{{projectLastUUID}}/graph",
							"host": [
								"{{domain}}"
							],
							"path": [
								"project",
								"{{projectLastUUID}}",
								"graph"
							]
						},
						"description": "Изменить граф смены статусов задач"
					},
					"response": []
				},
				{
					"name": "project/{uuid}/options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"require_cancelation_comment\" : true,\n   \"require_done_comment\": true,\n   \"status_enable\" : true,\n   \"priority_enable\" : true,\n   \"color\":\"#111111\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/project/{{projectLastUUID}}/options",
							"host": [
								"{{domain}}"
							],
							"path": [
								"project",
								"{{projectLastUUID}}",
								"options"
							]
						},
						"description": "Изменение настроек проекта"
					},
					"response": []
				},
				{
					"name": "/federation/{uuid}/project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData).to.be.not.empty;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/federation/{{federationLastUUID}}/project",
							"host": [
								"{{domain}}"
							],
							"path": [
								"federation",
								"{{federationLastUUID}}",
								"project"
							]
						},
						"description": "Получение данных проекта"
					},
					"response": []
				},
				{
					"name": "project/{uuid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/project/{{projectLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"project",
								"{{projectLastUUID}}"
							]
						},
						"description": "Получение данных проекта"
					},
					"response": []
				},
				{
					"name": "project/{uuid}/user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_uuid\" : \"{{userLastUUID}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/project/{{projectLastUUID}}/user",
							"host": [
								"{{domain}}"
							],
							"path": [
								"project",
								"{{projectLastUUID}}",
								"user"
							]
						},
						"description": "Добавление пользователя в проект"
					},
					"response": []
				},
				{
					"name": "project/{uuid}/user/{uuid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"federation_uuid\": \"{{federationLastUUID}}\",\n    \"user_uuid\" : \"{{usersLastUUID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/project/{{projectLastUUID}}/user/{{userLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"project",
								"{{projectLastUUID}}",
								"user",
								"{{userLastUUID}}"
							]
						},
						"description": "Удаление пользователя из проекта"
					},
					"response": []
				},
				{
					"name": "project/{uuid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{domain}}/project/{{projectLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"project",
								"{{projectLastUUID}}"
							]
						},
						"description": "Удаление проекта"
					},
					"response": []
				}
			]
		},
		{
			"name": "project_catalog",
			"item": [
				{
					"name": "project/{uuid}/catalog",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});",
									"",
									"pm.environment.set(\"projectCatalogDataLastUUID\", jsonData.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"catalog_name\" : \"reasons\", \n    \"value\" : \"resone one\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/project/{{projectLastUUID}}/catalog",
							"host": [
								"{{domain}}"
							],
							"path": [
								"project",
								"{{projectLastUUID}}",
								"catalog"
							]
						},
						"description": "Создание справочных каталогов для проекта"
					},
					"response": []
				},
				{
					"name": "project/{uuid}/catalog",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"catalog_name\" : \"reasons\", \n    \"value\" : \"resone one\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/project/{{projectLastUUID}}/catalog",
							"host": [
								"{{domain}}"
							],
							"path": [
								"project",
								"{{projectLastUUID}}",
								"catalog"
							]
						},
						"description": "Получение данных о каталоге"
					},
					"response": []
				},
				{
					"name": "project/{uuid}/catalog/reasons",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"catalog_name\" : \"reasons\", \n    \"value\" : \"resone one\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/project/{{projectLastUUID}}/catalog/reasons",
							"host": [
								"{{domain}}"
							],
							"path": [
								"project",
								"{{projectLastUUID}}",
								"catalog",
								"reasons"
							]
						},
						"description": "Получение данных о каталоге причин удаления задачи в проекте"
					},
					"response": []
				},
				{
					"name": "company/{uuid}/project/catalog/reasons",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"catalog_name\" : \"reasons\", \n    \"value\" : \"resone one\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/company/{{companyLastUUID}}/project/catalog/reasons",
							"host": [
								"{{domain}}"
							],
							"path": [
								"company",
								"{{companyLastUUID}}",
								"project",
								"catalog",
								"reasons"
							]
						},
						"description": "Получение данных о каталоге причин удаления задачи в компании"
					},
					"response": []
				}
			]
		},
		{
			"name": "task",
			"item": [
				{
					"name": "comments",
					"item": [
						{
							"name": "task/{uuid}/comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json()",
											"",
											"pm.test(\"Json uuid is not empty\", function () { ",
											"    pm.expect(jsonData.uuid).to.be.not.empty;",
											"});",
											"",
											"pm.environment.set(\"commentLastUUID\", jsonData.uuid);",
											"",
											"if (jsonData.uploads.length > 0) {",
											"    pm.environment.set(\"lastCommentFileUUID\", jsonData.uploads[0].uuid);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "comment",
											"value": "blabla {{$timestamp}} {{$randomWords}}",
											"type": "text"
										},
										{
											"key": "reply_uuid",
											"value": "cd84e2f2-c596-46a0-9f72-4de1d891af7e",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1eea13fd-e5a8-4570-8f6e-ef8fa972bd2b"
										},
										{
											"key": "people",
											"value": "student@learning.com",
											"type": "text",
											"disabled": true
										},
										{
											"key": "people",
											"value": "student-1@learning.com",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1eea13fd-e5a8-4570-8f6e-ef8fa972bd2b",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{domain}}/task/{{taskLastUUID}}/comment",
									"host": [
										"{{domain}}"
									],
									"path": [
										"task",
										"{{taskLastUUID}}",
										"comment"
									]
								},
								"description": "Создание комментария к задачи"
							},
							"response": []
						},
						{
							"name": "task/{uuid}/comment/{uuid}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json()",
											"",
											"pm.test(\"Json uuid is not empty\", function () { ",
											"    pm.expect(jsonData.uuid).to.be.not.empty;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "comment",
											"value": "blabla {{$timestamp}} {{$randomWords}}",
											"type": "text"
										},
										{
											"key": "reply_uuid",
											"value": "cd84e2f2-c596-46a0-9f72-4de1d891af7e",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1eea13fd-e5a8-4570-8f6e-ef8fa972bd2b",
											"disabled": true
										},
										{
											"key": "people",
											"value": "student@learning.com",
											"type": "text",
											"disabled": true
										},
										{
											"key": "people",
											"value": "student-1@learning.com",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1eea13fd-e5a8-4570-8f6e-ef8fa972bd2b",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{domain}}/task/{{taskLastUUID}}/comment/{{commentLastUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"task",
										"{{taskLastUUID}}",
										"comment",
										"{{commentLastUUID}}"
									]
								},
								"description": "Создание комментария к задачи"
							},
							"response": []
						},
						{
							"name": "task/{uuid}/comment/{uuid}/like",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json()",
											"",
											"pm.test(\"Json uuid is not empty\", function () { ",
											"    pm.expect(jsonData.uuid).to.be.not.empty;",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{domain}}/task/{{taskLastUUID}}/comment/{{commentLastUUID}}/like",
									"host": [
										"{{domain}}"
									],
									"path": [
										"task",
										"{{taskLastUUID}}",
										"comment",
										"{{commentLastUUID}}",
										"like"
									]
								},
								"description": "Поставить лайк комменту в задачи"
							},
							"response": []
						},
						{
							"name": "task/{uuid}/comment/{uuid}/pin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{domain}}/task/{{taskLastUUID}}/comment/{{commentLastUUID}}/pin",
									"host": [
										"{{domain}}"
									],
									"path": [
										"task",
										"{{taskLastUUID}}",
										"comment",
										"{{commentLastUUID}}",
										"pin"
									]
								},
								"description": "Закрепить сообщение в задачи"
							},
							"response": []
						},
						{
							"name": "task/{uuid}/comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json()",
											"",
											"pm.test(\"Json count is not empty\", function () { ",
											"    pm.expect(jsonData.count).to.be.greaterThan(-1);",
											"});",
											"",
											"if (jsonData.items.length > 0) {",
											"    pm.environment.set(\"commentLastUUID\", jsonData.items[0].uuid);",
											"}",
											"",
											"if (jsonData.items.length > 0 && jsonData.items[0].files.length > 0) {",
											"    pm.environment.set(\"commentLastUUID\", jsonData.items[0].uuid);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/task/{{taskLastUUID}}/comment",
									"host": [
										"{{domain}}"
									],
									"path": [
										"task",
										"{{taskLastUUID}}",
										"comment"
									]
								},
								"description": "Получить данные комментариев в задачи"
							},
							"response": []
						},
						{
							"name": "task/{uuid}/comment/{uuid}/file/{uuid}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{domain}}/task/{{taskLastUUID}}/comment/{{commentLastUUID}}/file/{{lastCommentFileUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"task",
										"{{taskLastUUID}}",
										"comment",
										"{{commentLastUUID}}",
										"file",
										"{{lastCommentFileUUID}}"
									]
								},
								"description": "Удалить коммент из задачи"
							},
							"response": []
						},
						{
							"name": "task/{uuid}/comment/{uuid}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{domain}}/task/{{taskLastUUID}}/comment/{{commentLastUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"task",
										"{{taskLastUUID}}",
										"comment",
										"{{commentLastUUID}}"
									]
								},
								"description": "Удалить коммент из задачи"
							},
							"response": []
						}
					]
				},
				{
					"name": "upload",
					"item": [
						{
							"name": "task/{uuid}/upload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json()",
											"",
											"pm.test(\"Json uuid is not empty\", function () { ",
											"    pm.expect(jsonData.uuid).to.be.not.empty;",
											"});",
											"",
											"pm.environment.set(\"lastUploadUUID\", jsonData.uuid);",
											"",
											"pm.environment.set(\"lastUploadURL\", jsonData.url);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "postman-cloud:///1eea13fd-e5a8-4570-8f6e-ef8fa972bd2b"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/task/{{taskLastUUID}}/upload",
									"host": [
										"{{domain}}"
									],
									"path": [
										"task",
										"{{taskLastUUID}}",
										"upload"
									]
								},
								"description": "Загрузить файл в задачу"
							},
							"response": []
						},
						{
							"name": "task/{uuid}/upload/{uuid}/delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{domain}}/task/{{taskLastUUID}}/upload/{{lastUploadUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"task",
										"{{taskLastUUID}}",
										"upload",
										"{{lastUploadUUID}}"
									]
								},
								"description": "Удалить загруженный файл в задачу"
							},
							"response": []
						},
						{
							"name": "task/{uuid}/upload/{uuid}/rename",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\" : \"xxxx\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}/task/{{taskLastUUID}}/upload/{{lastUploadUUID}}/rename",
									"host": [
										"{{domain}}"
									],
									"path": [
										"task",
										"{{taskLastUUID}}",
										"upload",
										"{{lastUploadUUID}}",
										"rename"
									]
								},
								"description": "Переименовать загруженный файл в задаче"
							},
							"response": []
						},
						{
							"name": "task/{uuid}/upload/{uuid}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
											"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"type": "file",
											"src": "postman-cloud:///1eea13fd-e5a8-4570-8f6e-ef8fa972bd2b"
										}
									]
								},
								"url": {
									"raw": "{{domain}}/task/{{taskLastUUID}}/upload/{{lastUploadUUID}}",
									"host": [
										"{{domain}}"
									],
									"path": [
										"task",
										"{{taskLastUUID}}",
										"upload",
										"{{lastUploadUUID}}"
									]
								},
								"description": "Получение всех загруженных файлов в задаче"
							},
							"response": []
						}
					]
				},
				{
					"name": "task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});",
									"",
									"pm.environment.set(\"taskLastUUID\", jsonData.uuid);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"my task {{$timestamp}}\",\n    \"project_uuid\" : \"{{projectLastUUID}}\",\n    \"fields\" : { \n        //\"h\" : \"2006-01-02T15:04:05Z07:00\"\n    },\n    \"finish_to\": \"2006-01-02T15:04:05Z\",\n    \"description\" : \"short desc\",\n    \"coworkers_by\" : [\"student-3@learning.com\"],\n    \"implemente_by\" : \"student@learning.com\",\n    \"responsible_by\" : \"student-2@learning.com\",\n    \"tags\" : [\"a\",\"{{tagLastUUID}}\"],\n    \"priority\" : 3,\n    // \"task_entities\" : [\n    //     {\n    //         \"uuid\": \"4c726fdd-4d13-46ed-8f62-42ab8d2ca4b2\",\n    //         \"fields\" : [\"a\",\"b\"]\n    //     }\n    // ]\n    \"icon\" : \"star\"\n    //\"managed_by\" : \"student-4@learning.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/task",
							"host": [
								"{{domain}}"
							],
							"path": [
								"task"
							]
						},
						"description": "Создание задачи"
					},
					"response": []
				},
				{
					"name": "task (child)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});",
									"",
									"pm.environment.set(\"taskLastUUID\", jsonData.uuid);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"my task {{$timestamp}}\",\n    \"project_uuid\" : \"{{projectLastUUID}}\", \n    \"description\" : \"short desc\",\n    \"path\" : [\"{{taskLastUUID}}\"],\n    \"icon\" : \"star\"\n    \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/task",
							"host": [
								"{{domain}}"
							],
							"path": [
								"task"
							]
						},
						"description": "Создание задачи"
					},
					"response": []
				},
				{
					"name": "task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \n    \"description\" : \"\", \n    \"tags\" : [\"aaa\",\"bbb\", \"aaa\"],\n    \"priority\" : 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/task/{{taskLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"task",
								"{{taskLastUUID}}"
							]
						},
						"description": "Изменение задачи"
					},
					"response": []
				},
				{
					"name": "task/{uuid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/task/{{taskLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"task",
								"{{taskLastUUID}}"
							]
						},
						"description": "Получение данных по задаче"
					},
					"response": [
						{
							"name": "task/{uuid}",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/task/cc67f718-8b51-455d-b80b-0350c365b967",
									"host": [
										"{{domain}}"
									],
									"path": [
										"task",
										"cc67f718-8b51-455d-b80b-0350c365b967"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-encoding",
									"value": "gzip"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "vary",
									"value": "Origin,Accept-Encoding"
								},
								{
									"key": "date",
									"value": "Mon, 13 May 2024 11:27:59 GMT"
								},
								{
									"key": "content-length",
									"value": "651"
								},
								{
									"key": "server",
									"value": "ycalb"
								}
							],
							"cookie": [],
							"body": "{\n    \"uuid\": \"213513bc-fb92-4d49-9182-73c13d34e43e\",\n    \"id\": 10003,\n    \"name\": \"my task 1715598773\",\n    \"description\": \"short desc\",\n    \"created_by\": {\n        \"uuid\": \"576b4344-ca37-40f0-85a6-50c50543d1b2\",\n        \"name\": \"Student\",\n        \"lname\": \"student\",\n        \"pname\": \"student\",\n        \"email\": \"student@learning.com\",\n        \"phone\": 79006002020,\n        \"has_photo\": false,\n        \"photo\": null\n    },\n    \"is_epic\": false,\n    \"co_workers_by\": [],\n    \"watch_by\": [],\n    \"tags\": [\n        \"a\"\n    ],\n    \"company_tags\": [],\n    \"federation\": {\n        \"uuid\": \"cb3e5fca-b76e-4fab-96b0-649abe9b7670\",\n        \"name\": \"my federation (1712681391)\"\n    },\n    \"project\": {\n        \"uuid\": \"91155dd5-80ed-40d6-962e-0fcd57cc2b31\",\n        \"name\": \"my project (1714661420)\",\n        \"description\": \"\",\n        \"status\": 0,\n        \"federation_uuid\": \"00000000-0000-0000-0000-000000000000\",\n        \"company_uuid\": \"00000000-0000-0000-0000-000000000000\"\n    },\n    \"path\": [\n        \"213513bc-fb92-4d49-9182-73c13d34e43e\"\n    ],\n    \"icon\": \"star\",\n    \"status\": {\n        \"code\": 0,\n        \"name\": \"todo\"\n    },\n    \"priority\": 3,\n    \"company_priority\": {\n        \"uuid\": \"00000000-0000-0000-0000-000000000000\",\n        \"name\": \"\",\n        \"priority\": 3,\n        \"color\": \"#000000\"\n    },\n    \"created_at\": \"2024-05-13T14:12:52.320094+03:00\",\n    \"finished_at\": null,\n    \"finish_to\": \"2006-01-02T18:04:05+03:00\",\n    \"duration\": 0,\n    \"updated_at\": \"2024-05-13T14:14:27.01004+03:00\",\n    \"activity_at\": \"2024-05-13T14:14:27.006511+03:00\",\n    \"fields\": [],\n    \"comments\": [],\n    \"files\": [],\n    \"reminders\": [],\n    \"comments_total\": 0,\n    \"childrens_total\": 0,\n    \"linked_fields_data\": {},\n    \"stops\": [],\n    \"is_liked\": false,\n    \"first_open\": [\n        {\n            \"open_at\": \"2024-05-13T14:14:27.002297552+03:00\",\n            \"open_by\": {\n                \"uuid\": \"576b4344-ca37-40f0-85a6-50c50543d1b2\",\n                \"name\": \"student\",\n                \"lname\": \"student\",\n                \"pname\": \"student\",\n                \"email\": \"student@learning.com\",\n                \"phone\": 79006003030,\n                \"has_photo\": false,\n                \"photo\": null\n            }\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "task/{uuid}/activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/task/{{taskLastUUID}}/activity?limit=10&offset=0",
							"host": [
								"{{domain}}"
							],
							"path": [
								"task",
								"{{taskLastUUID}}",
								"activity"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						},
						"description": "Получение данных по задаче"
					},
					"response": [
						{
							"name": "task/{uuid}",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{domain}}/task/cc67f718-8b51-455d-b80b-0350c365b967",
									"host": [
										"{{domain}}"
									],
									"path": [
										"task",
										"cc67f718-8b51-455d-b80b-0350c365b967"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "cache-control",
									"value": "no-cache"
								},
								{
									"key": "content-encoding",
									"value": "gzip"
								},
								{
									"key": "content-type",
									"value": "application/json"
								},
								{
									"key": "vary",
									"value": "Origin,Accept-Encoding"
								},
								{
									"key": "date",
									"value": "Mon, 13 May 2024 11:27:59 GMT"
								},
								{
									"key": "content-length",
									"value": "651"
								},
								{
									"key": "server",
									"value": "ycalb"
								}
							],
							"cookie": [],
							"body": "{\n    \"uuid\": \"213513bc-fb92-4d49-9182-73c13d34e43e\",\n    \"id\": 10003,\n    \"name\": \"my task 1715598773\",\n    \"description\": \"short desc\",\n    \"created_by\": {\n        \"uuid\": \"576b4344-ca37-40f0-85a6-50c50543d1b2\",\n        \"name\": \"student\",\n        \"lname\": \"student\",\n        \"pname\": \"student\",\n        \"email\": \"student@learning.com\",\n        \"phone\": 79031112233,\n        \"has_photo\": false,\n        \"photo\": null\n    },\n    \"is_epic\": false,\n    \"co_workers_by\": [],\n    \"watch_by\": [],\n    \"tags\": [\n        \"a\"\n    ],\n    \"company_tags\": [],\n    \"federation\": {\n        \"uuid\": \"cb3e5fca-b76e-4fab-96b0-649abe9b7670\",\n        \"name\": \"my federation (1712681391)\"\n    },\n    \"project\": {\n        \"uuid\": \"91155dd5-80ed-40d6-962e-0fcd57cc2b31\",\n        \"name\": \"my project (1714661420)\",\n        \"description\": \"\",\n        \"status\": 0,\n        \"federation_uuid\": \"00000000-0000-0000-0000-000000000000\",\n        \"company_uuid\": \"00000000-0000-0000-0000-000000000000\"\n    },\n    \"path\": [\n        \"213513bc-fb92-4d49-9182-73c13d34e43e\"\n    ],\n    \"icon\": \"star\",\n    \"status\": {\n        \"code\": 0,\n        \"name\": \"todo\"\n    },\n    \"priority\": 3,\n    \"company_priority\": {\n        \"uuid\": \"00000000-0000-0000-0000-000000000000\",\n        \"name\": \"\",\n        \"priority\": 3,\n        \"color\": \"#000000\"\n    },\n    \"created_at\": \"2024-05-13T14:12:52.320094+03:00\",\n    \"finished_at\": null,\n    \"finish_to\": \"2006-01-02T18:04:05+03:00\",\n    \"duration\": 0,\n    \"updated_at\": \"2024-05-13T14:14:27.01004+03:00\",\n    \"activity_at\": \"2024-05-13T14:14:27.006511+03:00\",\n    \"fields\": [],\n    \"comments\": [],\n    \"files\": [],\n    \"reminders\": [],\n    \"comments_total\": 0,\n    \"childrens_total\": 0,\n    \"linked_fields_data\": {},\n    \"stops\": [],\n    \"is_liked\": false,\n    \"first_open\": [\n        {\n            \"open_at\": \"2024-05-13T14:14:27.002297552+03:00\",\n            \"open_by\": {\n                \"uuid\": \"576b4344-ca37-40f0-85a6-50c50543d1b2\",\n                \"name\": \"student\",\n                \"lname\": \"student\",\n                \"pname\": \"student\",\n                \"email\": \"student@learning.com\",\n                \"phone\": 79006002000,\n                \"has_photo\": false,\n                \"photo\": null\n            }\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "task/{uuid}/upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/task/{{taskLastUUID}}/upload",
							"host": [
								"{{domain}}"
							],
							"path": [
								"task",
								"{{taskLastUUID}}",
								"upload"
							]
						},
						"description": "Получение данных загруженных файлов в задаче"
					},
					"response": []
				},
				{
					"name": "task/{uuid}/name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"my task {{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/task/{{taskLastUUID}}/name",
							"host": [
								"{{domain}}"
							],
							"path": [
								"task",
								"{{taskLastUUID}}",
								"name"
							]
						},
						"description": "Изменение имени задачи"
					},
					"response": []
				},
				{
					"name": "task/{uuid}/status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.stop_uuid).to.be.not.empty;",
									"}); ",
									"",
									"",
									"pm.environment.set(\"stopLastUUID\", jsonData.stop_uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\" : 6,\n    \"comment\" : \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/task/{{taskLastUUID}}/status",
							"host": [
								"{{domain}}"
							],
							"path": [
								"task",
								"{{taskLastUUID}}",
								"status"
							]
						},
						"description": "Изменение статуса задачи"
					},
					"response": []
				},
				{
					"name": "task/{uuid}/stop/{uuid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{domain}}/task/{{taskLastUUID}}/stop/{{stopLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"task",
								"{{taskLastUUID}}",
								"stop",
								"{{stopLastUUID}}"
							]
						},
						"description": "Удаление активности из задачи"
					},
					"response": []
				},
				{
					"name": "task/{uuid}/parent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"uuid\": \"0f52cad1-5b2e-49b0-8f55-df435ccb8bbe\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/task/{{taskLastUUID}}/parent",
							"host": [
								"{{domain}}"
							],
							"path": [
								"task",
								"{{taskLastUUID}}",
								"parent"
							]
						},
						"description": "Изменение родительской задачи в задаче"
					},
					"response": []
				},
				{
					"name": "task/{uuid}/project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"uuid\": \"{{projectLastUUID}}\",\n    \"status\" : 2,\n    \"comment\" : \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/task/{{taskLastUUID}}/project",
							"host": [
								"{{domain}}"
							],
							"path": [
								"task",
								"{{taskLastUUID}}",
								"project"
							]
						},
						"description": "Изменение родительской задачи в задаче"
					},
					"response": []
				},
				{
					"name": "task/{uuid}/team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"responsible_by\": \"student@learning.com\",\n    \"implement_by\" : \"student@learning.com\",\n    \"coworkers_by\" : [\"student@learning.com\"],\n    \"watched_by\" : [ ],\n    \"managed_by\" : \"\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/task/{{taskLastUUID}}/team",
							"host": [
								"{{domain}}"
							],
							"path": [
								"task",
								"{{taskLastUUID}}",
								"team"
							]
						},
						"description": "Изменение Тим (Ответственный, Наблюдатель и тд) в задаче"
					},
					"response": []
				},
				{
					"name": "task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json count is not null\", function () { ",
									"    pm.expect(jsonData.count).to.be.not.null; ",
									"});",
									"",
									"pm.test(\"Json items is not null\", function () { ",
									"    pm.expect(jsonData.items).to.be.not.null; ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{domain}}/task?federation_uuid={{federationLastUUID}}&is_epic=true&offset=0&limit=10&by=asc&project_uuid={{projectLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"task"
							],
							"query": [
								{
									"key": "federation_uuid",
									"value": "{{federationLastUUID}}"
								},
								{
									"key": "is_epic",
									"value": "true"
								},
								{
									"key": "status",
									"value": "0",
									"disabled": true
								},
								{
									"key": "name",
									"value": "as",
									"disabled": true
								},
								{
									"key": "tags",
									"value": "[\"a\"]",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "is_my",
									"value": "false",
									"disabled": true
								},
								{
									"key": "paticipated",
									"value": "asdsad",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "{\"a\":7}",
									"disabled": true
								},
								{
									"key": "order",
									"value": "fields.a",
									"disabled": true
								},
								{
									"key": "by",
									"value": "asc"
								},
								{
									"key": "path",
									"value": "4dc5adc0-026c-496f-b7f2-19a8c7d1e890.*",
									"disabled": true
								},
								{
									"key": "project_uuid",
									"value": "{{projectLastUUID}}"
								}
							]
						},
						"description": "Получение задач"
					},
					"response": []
				},
				{
					"name": "task (xlsx)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{domain}}/task?format=xlsx&project_uuid={{projectLastUUID}}&is_epic=false&status=0&offset=0&limit=10&order=fields.a&by=asc&federation_uuid={{federationLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"task"
							],
							"query": [
								{
									"key": "format",
									"value": "xlsx"
								},
								{
									"key": "project_uuid",
									"value": "{{projectLastUUID}}"
								},
								{
									"key": "is_epic",
									"value": "false"
								},
								{
									"key": "status",
									"value": "0"
								},
								{
									"key": "name",
									"value": "as",
									"disabled": true
								},
								{
									"key": "tags",
									"value": "[\"a\"]",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "is_my",
									"value": "false",
									"disabled": true
								},
								{
									"key": "paticipated",
									"value": "asdsad",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "{\"a\":7}",
									"disabled": true
								},
								{
									"key": "order",
									"value": "fields.a"
								},
								{
									"key": "by",
									"value": "asc"
								},
								{
									"key": "federation_uuid",
									"value": "{{federationLastUUID}}"
								}
							]
						},
						"description": "Экспорт задач в эксель"
					},
					"response": []
				},
				{
					"name": "task/{uuid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"comment\" : \"blabla {{$timestamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/task/{{taskLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"task",
								"{{taskLastUUID}}"
							]
						},
						"description": "Удаление задачи"
					},
					"response": []
				}
			]
		},
		{
			"name": "agents",
			"item": [
				{
					"name": "federation/{uuid}/agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});",
									"",
									"pm.environment.set(\"agentLastUUID\", jsonData.uuid);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"my agent e {{$timestamp}}\",\n    \"contacts\" : [\n        {\n            \"type\" : \"phonee\",\n            \"value\" : \"79031238800\"\n        },\n         {\n            \"type\" : \"phonee-2\",\n            \"value\" : \"79031238800\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/federation/{{federationLastUUID}}/agent",
							"host": [
								"{{domain}}"
							],
							"path": [
								"federation",
								"{{federationLastUUID}}",
								"agent"
							]
						},
						"description": "Создание задачи"
					},
					"response": []
				},
				{
					"name": "federation/{uuid}/agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/federation/{{federationLastUUID}}/agent",
							"host": [
								"{{domain}}"
							],
							"path": [
								"federation",
								"{{federationLastUUID}}",
								"agent"
							]
						},
						"description": "Создание задачи"
					},
					"response": []
				},
				{
					"name": "federation/{uuid}/agent/{uuid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"my agent updated {{$timestamp}}\",\n    \"contacts\" : [\n        {\n            \"type\" : \"phonee\",\n            \"value\" : \"79031238800\"\n        },\n         {\n            \"type\" : \"phonee-2\",\n            \"value\" : \"79031238800\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/federation/{{federationLastUUID}}/agent/{{agentLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"federation",
								"{{federationLastUUID}}",
								"agent",
								"{{agentLastUUID}}"
							]
						},
						"description": "Создание задачи"
					},
					"response": []
				},
				{
					"name": "federation/{uuid}/agent/{uuid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" ",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{domain}}/federation/{{federationLastUUID}}/agent/{{agentLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"federation",
								"{{federationLastUUID}}",
								"agent",
								"{{agentLastUUID}}"
							]
						},
						"description": "Создание задачи"
					},
					"response": []
				}
			]
		},
		{
			"name": "reminder",
			"item": [
				{
					"name": "reminder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});",
									"",
									"pm.environment.set(\"reminderLastUUID\", jsonData.uuid);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"task_uuid\": \"{{taskLastUUID}}\",\n    \"description\": \"reminder {{$timestamp}}\",\n    \"date_from\" : \"2007-01-02T11:04:05+03:00\",\n    \"date_to\" : \"2007-01-02T11:04:05+03:00\",\n    \"type\" : \"Cвязаться\"\n    //\"user_uuid\" : \"cec767f8-94ae-4fbd-b4ae-624fb6769cc7\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/reminder",
							"host": [
								"{{domain}}"
							],
							"path": [
								"reminder"
							]
						},
						"description": "Создание дела"
					},
					"response": []
				},
				{
					"name": "reminder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									" ",
									"if (jsonData.items.length > 0) {",
									"    pm.environment.set(\"reminderLastUUID\", jsonData.items[0].uuid);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/reminder",
							"host": [
								"{{domain}}"
							],
							"path": [
								"reminder"
							]
						},
						"description": "Получение данных дела"
					},
					"response": []
				},
				{
					"name": "reminder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n    \"description\": \"updated {{$timestamp}}\",\n    \"comment\" : \"Comment {{$timestamp}}\",\n    \"date_to\" : \"2006-01-02T05:05:05+03:00\",\n    \"date_from\" : \"2006-01-02T05:05:05+03:00\",\n    \"Type\" : \"Позвонить\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/reminder/{{reminderLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"reminder",
								"{{reminderLastUUID}}"
							]
						},
						"description": "Изменение дел"
					},
					"response": []
				},
				{
					"name": "status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n    \"status\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/reminder/{{reminderLastUUID}}/status",
							"host": [
								"{{domain}}"
							],
							"path": [
								"reminder",
								"{{reminderLastUUID}}",
								"status"
							]
						},
						"description": "Изменение статуса в деле"
					},
					"response": []
				},
				{
					"name": "reminder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{domain}}/reminder/{{reminderLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"reminder",
								"{{reminderLastUUID}}"
							]
						},
						"description": "Удаление дела"
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"federation_uuid\": \"{{federationLastUUID}}\",\n    \"search\" : \"Ивановн\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/user",
							"host": [
								"{{domain}}"
							],
							"path": [
								"user"
							]
						},
						"description": "Получение данных пользователей"
					},
					"response": []
				}
			]
		},
		{
			"name": "catalogs",
			"item": [
				{
					"name": "catalog (int)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});",
									"",
									"pm.environment.set(\"catalog-1-LastUUID\", jsonData.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"food\",\n    \"company_uuid\" : \"{{companyLastUUID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/catalog",
							"host": [
								"{{domain}}"
							],
							"path": [
								"catalog"
							]
						},
						"description": "Создание каталогов"
					},
					"response": []
				},
				{
					"name": "catalog",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});",
									"",
									"pm.environment.set(\"catalogLastUUID\", jsonData.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"my-goods\",\n    \"company_uuid\" : \"{{companyLastUUID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/catalog",
							"host": [
								"{{domain}}"
							],
							"path": [
								"catalog"
							]
						},
						"description": "Создание каталога"
					},
					"response": []
				},
				{
					"name": "catalog/{uuid}/name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"my project ({{$timestamp}})\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/catalog/{{catalogLastUUID}}/name",
							"host": [
								"{{domain}}"
							],
							"path": [
								"catalog",
								"{{catalogLastUUID}}",
								"name"
							]
						},
						"description": "Изменение имени в каталоге"
					},
					"response": []
				},
				{
					"name": "catalog/{uuid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/catalog/{{catalogLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"catalog",
								"{{catalogLastUUID}}"
							]
						},
						"description": "Получить данные каталога"
					},
					"response": []
				},
				{
					"name": "catalog",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json count is not empty\", function () { ",
									"    pm.expect(jsonData.count).to.be.greaterThan(-1);",
									"});",
									" ",
									"if (jsonData.items.length > 0) { ",
									"    pm.environment.set(\"catalogLastUUID\", jsonData.items[jsonData.items.length-1].uuid); ",
									"}",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"company_uuid\" : \"{{companyLastUUID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/catalog",
							"host": [
								"{{domain}}"
							],
							"path": [
								"catalog"
							]
						},
						"description": "Получить данные каталогов"
					},
					"response": []
				},
				{
					"name": "catalog/{uuid}/field/named",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});",
									"",
									"if (jsonData.uuid) {",
									"    pm.environment.set(\"catalogFieldLastUUID\", jsonData.uuid);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"My lid name\", \n    \"hash\" : \"lid_name\", \n    \"data_type\" : 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/catalog/{{catalogLastUUID}}/fields/named",
							"host": [
								"{{domain}}"
							],
							"path": [
								"catalog",
								"{{catalogLastUUID}}",
								"fields",
								"named"
							]
						},
						"description": "Добавить поле в каталог с типом данных 2"
					},
					"response": []
				},
				{
					"name": "catalog/{uuid}/fields (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});",
									"",
									"pm.environment.set(\"catalogFieldLastUUID\", jsonData.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"my field name ({{$timestamp}})\", \n    \"data_type\" : 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/catalog/{{catalogLastUUID}}/fields",
							"host": [
								"{{domain}}"
							],
							"path": [
								"catalog",
								"{{catalogLastUUID}}",
								"fields"
							]
						},
						"description": "Добавить поле в каталог с типом данных 1"
					},
					"response": []
				},
				{
					"name": "catalog/{uuid}/fields (5)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});",
									"",
									"pm.environment.set(\"catalogFieldLastUUID\", jsonData.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"my field name ({{$timestamp}})\", \n    \"data_type\" : 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/catalog/{{catalogLastUUID}}/fields",
							"host": [
								"{{domain}}"
							],
							"path": [
								"catalog",
								"{{catalogLastUUID}}",
								"fields"
							]
						},
						"description": "Добавить поле в каталог с типом данных 5"
					},
					"response": []
				},
				{
					"name": "catalog/{uuid}/fields (6)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});",
									"",
									"pm.environment.set(\"catalogFieldLastUUID\", jsonData.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"my field name ({{$timestamp}})\", \n    \"data_type\" : 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/catalog/{{catalogLastUUID}}/fields",
							"host": [
								"{{domain}}"
							],
							"path": [
								"catalog",
								"{{catalogLastUUID}}",
								"fields"
							]
						},
						"description": "Добавить поле в каталог с типом данных 6"
					},
					"response": []
				},
				{
					"name": "catalog/{uuid}/fields (7)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});",
									"",
									"pm.environment.set(\"catalogFieldLastUUID\", jsonData.uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"my field name ({{$timestamp}})\", \n    \"data_type\" : 7,\n    \"data_uuid\" : \"{{catalog-1-LastUUID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/catalog/{{catalogLastUUID}}/fields",
							"host": [
								"{{domain}}"
							],
							"path": [
								"catalog",
								"{{catalogLastUUID}}",
								"fields"
							]
						},
						"description": "Добавить поле в каталог с типом данных 7"
					},
					"response": []
				},
				{
					"name": "catalog/{uuid}/fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json\", function () { ",
									"    pm.expect(jsonData).to.be.not.empty;",
									"});",
									"",
									"if (jsonData.items.length > 0) {",
									"    jsonData.items.forEach( i => {",
									"        if (i.data_type == 7 && i.data_catalog_uuid != null ) {",
									"            pm.environment.set(\"pivotCatalogUUID\", i.data_catalog_uuid);",
									"            pm.environment.set(\"pivotCatalogFieldUUID\", i.hash);",
									"        }",
									"    })",
									"}",
									" ",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/catalog/{{catalogLastUUID}}/fields",
							"host": [
								"{{domain}}"
							],
							"path": [
								"catalog",
								"{{catalogLastUUID}}",
								"fields"
							]
						},
						"description": "Получение данных полей каталога"
					},
					"response": []
				},
				{
					"name": "catalog/{uuid}/fields/{uuid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"lid_name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/catalog/{{catalogLastUUID}}/fields/{{catalogFieldLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"catalog",
								"{{catalogLastUUID}}",
								"fields",
								"{{catalogFieldLastUUID}}"
							]
						},
						"description": "Изменение полей каталога"
					},
					"response": []
				},
				{
					"name": "catalog/{uuid}/data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n    \"fields\": { \n        \"a\" : 3.1415\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/catalog/{{catalogLastUUID}}/data",
							"host": [
								"{{domain}}"
							],
							"path": [
								"catalog",
								"{{catalogLastUUID}}",
								"data"
							]
						},
						"description": "Заполенение данных каталога"
					},
					"response": []
				},
				{
					"name": "catalog/{uuid}/data (uuid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n    \"fields\": { \n        \"{{pivotCatalogFieldUUID}}\" : \"11c5af8b-2640-4d72-96b5-dd30f0e6d61d\"\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/catalog/{{catalogLastUUID}}/data",
							"host": [
								"{{domain}}"
							],
							"path": [
								"catalog",
								"{{catalogLastUUID}}",
								"data"
							]
						},
						"description": "Саполнение полей каталога"
					},
					"response": []
				},
				{
					"name": "catalog/{uuid}/data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"jsonData is not empty\", function () { ",
									"    pm.expect(jsonData).to.be.not.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{domain}}/catalog/{{catalogLastUUID}}/data?limit=100&order=fields.c",
							"host": [
								"{{domain}}"
							],
							"path": [
								"catalog",
								"{{catalogLastUUID}}",
								"data"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								},
								{
									"key": "fields",
									"value": "{\"name\":\"Metzz\"}",
									"disabled": true
								},
								{
									"key": "order",
									"value": "fields.c"
								},
								{
									"key": "by",
									"value": "asc",
									"disabled": true
								}
							]
						},
						"description": "Получение данных полей каталога"
					},
					"response": []
				},
				{
					"name": "directory/{uuid}/fields/{uuid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{domain}}/catalog/{{catalogLastUUID}}/fields/{{catalogFieldLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"catalog",
								"{{catalogLastUUID}}",
								"fields",
								"{{catalogFieldLastUUID}}"
							]
						},
						"description": "Удаление полей каталога"
					},
					"response": []
				},
				{
					"name": "directory/{uuid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{domain}}/catalog/{{catalogLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"catalog",
								"{{catalogLastUUID}}"
							]
						},
						"description": "Удаление каталога"
					},
					"response": []
				}
			]
		},
		{
			"name": "permissions",
			"item": [
				{
					"name": "permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.uuid).to.be.not.empty;",
									"});",
									"",
									"pm.environment.set(\"permissionLastUUID\", jsonData.user_uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"federation_uuid\" : \"{{federationLastUUID}}\",\n    \"user_uuid\" : \"{{userLastUUID}}\",\n    \"rules\" : {\n       \"federation_patch\" : false,\n       \"federation_invite_user\" : true,\n       \"federation_delete_user\" : true,\n       \"company_create\" : true,\n       \"company_delete\" : true,\n       \"company_patch\" : true,\n       \"company_add_user\" : true,\n       \"company_delete_user\" : true,\n       \"project_create\" : true,\n       \"project_delete\" : true,\n       \"project_patch\" : true,\n       \"project_add_user\" : true,\n       \"project_delete_user\" : true,\n       \"task_create\" : true,\n       \"task_delete\" : false,\n       \"task_patch\" : true\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/permissions",
							"host": [
								"{{domain}}"
							],
							"path": [
								"permissions"
							]
						},
						"description": "Создание прав доступа"
					},
					"response": []
				},
				{
					"name": "permissions/{uuid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Json uuid is not empty\", function () { ",
									"    pm.expect(jsonData.user_uuid).to.be.not.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"federation_uuid\" : \"{{federationLastUUID}}\",\n    \"user_uuid\" : \"{{userLastUUID}}\",\n    \"rules\" : {\n       \"federation_patch\" : true,\n       \"federation_invite_user\" : true,\n       \"federation_delete_user\" : true,\n       \"company_create\" : true,\n       \"company_delete\" : true,\n       \"company_patch\" : true,\n       \"company_add_user\" : true,\n       \"company_delete_user\" : true,\n       \"project_create\" : true,\n       \"project_delete\" : true,\n       \"project_patch\" : true,\n       \"project_add_user\" : true,\n       \"project_delete_user\" : true,\n       \"task_create\" : true,\n       \"task_delete\" : true,\n       \"task_patch\" : true\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}/permissions/{{permissionLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"permissions",
								"{{permissionLastUUID}}"
							]
						},
						"description": "Получение данных прав"
					},
					"response": []
				},
				{
					"name": "permissions/{uuid}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
									"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{domain}}/permissions/{{permissionLastUUID}}",
							"host": [
								"{{domain}}"
							],
							"path": [
								"permissions",
								"{{permissionLastUUID}}"
							]
						},
						"description": "Удаление прав"
					},
					"response": []
				}
			]
		},
		{
			"name": "/about",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
							"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
							"});",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/about",
					"host": [
						"{{domain}}"
					],
					"path": [
						"about"
					]
				}
			},
			"response": []
		},
		{
			"name": "ping",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
							"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
							"});",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/about",
					"host": [
						"{{domain}}"
					],
					"path": [
						"about"
					]
				}
			},
			"response": []
		},
		{
			"name": "/metrics",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
							"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
							"});",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/metrics",
					"host": [
						"{{domain}}"
					],
					"path": [
						"metrics"
					]
				}
			},
			"response": []
		},
		{
			"name": "openapi.yaml",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
							"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
							"});",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/openapi.yaml",
					"host": [
						"{{domain}}"
					],
					"path": [
						"openapi.yaml"
					]
				}
			},
			"response": []
		},
		{
			"name": "/health",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    minimum = parseInt(pm.environment.get(\"minimumResponseTime\"))",
							"    pm.expect(pm.response.responseTime).to.be.below(minimum);",
							"});",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/health",
					"host": [
						"{{domain}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "/seed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/seed?usersCount=5&projectsCount=5&cores=12&tasksCountPerCore=1000&batch=1000",
					"host": [
						"{{domain}}"
					],
					"path": [
						"seed"
					],
					"query": [
						{
							"key": "usersCount",
							"value": "5"
						},
						{
							"key": "projectsCount",
							"value": "5"
						},
						{
							"key": "cores",
							"value": "12"
						},
						{
							"key": "tasksCountPerCore",
							"value": "1000"
						},
						{
							"key": "batch",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/seed_task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/seed_task?total=100&project_uuid={{projectLastUUID}}&created_by=student@learning.com&random_implemented=true&comments_max=50",
					"host": [
						"{{domain}}"
					],
					"path": [
						"seed_task"
					],
					"query": [
						{
							"key": "total",
							"value": "100"
						},
						{
							"key": "project_uuid",
							"value": "{{projectLastUUID}}"
						},
						{
							"key": "created_by",
							"value": "student@learning.com"
						},
						{
							"key": "random_implemented",
							"value": "true"
						},
						{
							"key": "comments_max",
							"value": "50"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}